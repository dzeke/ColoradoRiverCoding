dfPowellVals <- melt(subset(dfPoolVols,Reservoir == "Powell"),id.vars = c("Reservoir"))
dfPowellVals$level <- interp1(xi = dfPowellVals$value,x=dfPowellElevStor$`Live Storage (ac-ft)`,y=dfPowellElevStor$`Elevation (ft)`, method="linear")
dfPowellVals <- melt(dfPowellVals,id.vars = c("Reservoir","variable","value","level"))
dfMeadVals <- melt(dfMeadVals,id.vars = c("Reservoir","variable","value","level"))
# Convert to MAF storage
dfMeadVals$stor_maf <- dfMeadVals$value / 1000000
dfPowellVals$stor_maf <- dfPowellVals$value / 1000000
#Calculate the volume of flood storage space reserved
dfReservedFlood$Mead_flood_stor <- dfMeadVals[2,c("stor_maf")] - dfReservedFlood$Mead
dfReservedFlood$Powell_flood_stor <- dfPowellVals[2,c("stor_maf")] - dfReservedFlood$Powell
#Calculate levels for the reserved flood volumes
dfReservedFlood$Mead_level <- interp1(xi = dfReservedFlood$Mead_flood_stor*1000000,x=dfMeadElevStor$`Live Storage (ac-ft)`,y=dfMeadElevStor$`Elevation (ft)`, method="linear")
dfReservedFlood$Powell_level <- interp1(xi = dfReservedFlood$Powell_flood_stor*1000000,x=dfPowellElevStor$`Live Storage (ac-ft)`,y=dfPowellElevStor$`Elevation (ft)`, method="linear")
# Include additional levels not in the CRSS pool data
#Specify Powell Equalization levels by Year (data values from Interim Guidelines)
dfPowellEqLevels <- data.frame(Year = c(2008:2026), Elevation = c(3636,3639,3642,3643,3645,3646,3648,3649,3651,3652,3654,3655,3657,3659,3660,3663,3663,3664,3666))
dfPowellEqLevels$Volume <- vlookup(dfPowellEqLevels$Elevation,dfPowellElevStor,result_column=2,lookup_column = 1)/1000000
#Need to convert these Powell volumes into equivalent Mead levels for the next step
dfPowellEqLevels$EqMeadLev <- interpNA(xi = dfPowellEqLevels$Volume*1000000,x=dfMeadElevStor$`Live Storage (ac-ft)`,y=dfMeadElevStor$`Elevation (ft)`, method="linear")
dfMeadValsAdd <- data.frame(Reservoir = "Mead",
variable = c("Flood pool","Pearce rapid","DCP trigger","ISG trigger","SNWA intake #1","DCP bottom","SNWA intake #2","Mead power","SNWA intake #3"),
level = c(max(dfReservedFlood$Mead_level),1135,1090,1075,1050,1025,1000,955,860))
nRowMead <- nrow(dfMeadValsAdd)
dfMeadValsAdd$value <- 0
#Interpolate live storage volume
dfMeadValsAdd$value[1:(nRowMead-1)] <- interp1(xi = dfMeadValsAdd$level[1:(nRowMead-1)],x=dfMeadElevStor$`Elevation (ft)`,y=dfMeadElevStor$`Live Storage (ac-ft)`, method="linear")
#Add SNWA third straw which is below dead pool
dfMeadValsAdd$value[nRowMead] <- -dfMeadVals[10,3]
dfMeadValsAdd$stor_maf <- dfMeadValsAdd$value / 1000000
#Combine the original mead levels from CRSS with the levels added above
dfMeadAllPools <- rbind(dfMeadVals,dfMeadValsAdd)
#dfMeadAllPools <- dfMeadAllPools[order(dfMeadAllPools$month, dfMeadAllPools$level),]
#Pull out the desired rows
#dfMeadPoolsPlot <- dfMeadAllPools[c(3,6,7,9:13,16),]
cMeadVarNames <- c("Inactive Capacity", "Mead power", "SNWA intake #2", "DCP bottom", "SNWA intake #1", "DCP trigger", "Pearce rapid",
"Flood pool", "Live capacity")
dfMeadPoolsPlot <- dfMeadAllPools %>% filter(variable %in% cMeadVarNames) %>% arrange(level)
dfMeadPoolsPlot$name <- as.character(dfMeadPoolsPlot$variable)
#Rename a few of the variable labels
dfMeadPoolsPlot[1,c("name")] <- "Dead pool"
#dfMeadPoolsPlot[6,c("name")] <- "Flood Pool (1-Aug)"
#Create the y-axis tick label from the level and variable
#dfMeadPoolsPlot$label <- paste(round(dfMeadPoolsPlot$level,0),'\n',dfMeadPoolsPlot$name)
#Use label/labelComb when it's a secondary x axis
dfMeadPoolsPlot$label <- paste(str_replace_all(dfMeadPoolsPlot$name," ","\n"),'\n', round(dfMeadPoolsPlot$level,0))
dfMeadPoolsPlot$labelComb <- str_replace_all(dfMeadPoolsPlot$name," ","\n")
dfMeadPoolsPlot$labelComb[1] <- paste0(dfMeadPoolsPlot$labelComb[1],"s")
##Use labelSecY when it's a secondary y axis
dfMeadPoolsPlot$labelSecY <- paste(round(dfMeadPoolsPlot$level,0), " - ", dfMeadPoolsPlot$name)
#Assume deliveries hold constant when we go to even lower reservoir levels than defined in the DCP or ISG
#Copy the last row
dfCutbacks <- rbind(dfCutbacks, dfCutbacks %>% slice(rep(n(), each = 1)))
#Change the elevation and storage
dfCutbacks[nrow(dfCutbacks),c("Mead Elevation (ft)")] <- dfMeadAllPools %>% filter(Reservoir %in% c("Mead"), variable %in% c("Inactive Capacity")) %>%
select(level)
dfCutbacks[nrow(dfCutbacks),"MeadActiveVolume"] <- dfMeadAllPools %>% filter(Reservoir %in% c("Mead"), variable %in% c("Inactive Capacity")) %>%
select(stor_maf)*1000000
sReservoir <- "Mead"
#Identify the reservoir maximum active storage
tMaxVol <- as.numeric(round(dfMaxStor %>% filter(Reservoir %in% c(sReservoir)) %>% select(Volume)-0.5,0))
# CRSS value
eRateToUse <- dfEvapRates %>% filter(Reservoir %in% c(sReservoir), Source %in% c("CRSS")) %>% select(Rate.ft.per.year)
# 5-year running average from Moreo (2015)
eRateMoreo <- c(5.7,6.2,6.8)
eRateToUse <- 6.2 #I suggest that it is better to use the available 5-yr average for the latest Moreo data for Mead (6.2 ft/yr 2010-2015)
yMax = 10
yMin = 0
dfOneToOne <- data.frame(MeadVol = c(yMin,yMax), Delivery = c(yMin,yMax))
nRows <- nrow(dfCutbacks)
### Plot #1. DCP and ISG Deliveries versus Mead active storage
ggplot() +
#DCP and ISG step functions
geom_step(data=dfCutbacks[1:nRows-1,],aes(x=MeadActiveVolume/1000000,y=DeliveryISG/1000000, color = "ISG", linetype="ISG"), size=2, direction="vh") +
geom_step(data=dfCutbacks[1:nRows-1,],aes(x=MeadActiveVolume/1000000,y=DeliveryDCP/1000000, color = "DCP", linetype="DCP"), size=2, direction="vh") +
geom_line(data=dfOneToOne,aes(x=MeadVol,y=Delivery, color="1:1",linetype="1:1"), size=1) +
scale_color_manual(name="Guide1",values = c("1:1"="Black","ISG"="Blue", "DCP"="Red"),breaks=c("ISG","DCP","1:1"), labels= c("Interim Shortage Guidelines (2008)","Drought Contingency Plan (2019)","1:1" )) +
scale_linetype_manual(name="Guide1",values=c("1:1"="dashed","ISG"="longdash","DCP"="solid"), breaks=c("ISG", "DCP","1:1"), labels= c("Interim Shortage Guidelines (2008)","Drought Contingency Plan (2019)","1:1" )) +
scale_x_continuous(breaks = c(0,5,10,15,20,25),labels=c(0,5,10,15, 20,25), limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$label)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1)) +
ylim(yMin,yMax) +
theme_bw() +
labs(x="Mead Active Storage (MAF)", y="Delivery (MAF per year)") +
theme(text = element_text(size=20),  legend.title = element_blank(), legend.text=element_text(size=18), legend.position = c(0.7,0.5))
ggsave("Fig1-DeliveryVsMeadStorage.jpg",width = 12,
height = 8, units = "in",
dpi = 300)
### Plot #1B. ISG only Deliveries versus Mead active storage
ggplot() +
#DCP and ISG step functions
geom_step(data=dfCutbacks[1:nRows-1,],aes(x=MeadActiveVolume/1000000,y=DeliveryISG/1000000, color = "ISG", linetype="ISG"), size=2, direction="vh") +
#geom_step(data=dfCutbacks[1:nRows-1,],aes(x=MeadActiveVolume/1000000,y=DeliveryDCP/1000000, color = "DCP", linetype="DCP"), size=2, direction="vh") +
geom_line(data=dfOneToOne,aes(x=MeadVol,y=Delivery, color="1:1",linetype="1:1"), size=1) +
scale_color_manual(name="Guide1",values = c("1:1"="Black","ISG"="Blue"),breaks=c("ISG","1:1"), labels= c("Interim Shortage Guidelines (2008)","1:1")) +
scale_linetype_manual(name="Guide1",values=c("1:1"="dashed","ISG"="longdash"), breaks=c("ISG", "1:1"), labels= c("Interim Shortage Guidelines (2008)","1:1" )) +
scale_x_continuous(breaks = c(0,5,10,15,20,25),labels=c(0,5,10,15, 20,25), limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$label)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1)) +
ylim(yMin,yMax) +
theme_bw() +
labs(x="Mead Active Storage (MAF)", y="Delivery (MAF per year)") +
theme(text = element_text(size=20),  legend.title = element_blank(), legend.text=element_text(size=18), legend.position = c(0.7,0.5))
ggsave("Fig1-ISGDeliveryVsMeadStorage.jpg",width = 12,
height = 8, units = "in",
dpi = 300)
### Plot #2. DCP and ISG Deliveries versus Mead active storage with Mead protection level
#Protect to bottom of DCP cutbacks
lProtectLevel <- 1025
sProtectlabel <- "1:1 Line-Protect 1,025"
#Convert to acre-feet
vProtectLevel <- interp1(xi = lProtectLevel,x=dfMeadElevStor$`Elevation (ft)` , y=dfMeadElevStor$`Live Storage (ac-ft)`, method="linear")/1e6
# Construct a 1:1 line representing the Protection level. This line starts at (vProtectLevel,0)
dfProtectLine <- data.frame(MeadVol=c(vProtectLevel,vProtectLevel+yMax),Delivery=c(0,yMax))
ggplot() +
#DCP and ISG step functions
geom_step(data=dfCutbacks[1:nRows-1,],aes(x=MeadActiveVolume/1000000,y=DeliveryISG/1000000, color = "ISG", linetype="ISG"), size=2, direction="vh") +
geom_step(data=dfCutbacks[1:nRows-1,],aes(x=MeadActiveVolume/1000000,y=DeliveryDCP/1000000, color = "DCP", linetype="DCP"), size=2, direction="vh") +
geom_line(data=dfOneToOne,aes(x=MeadVol,y=Delivery, color="1:1 Line to Dead Pool",linetype="1:1 Line to Dead Pool"), size=1) +
geom_line(data=dfProtectLine,aes(x=MeadVol,y=Delivery, color="1:1 Line-Protect 1,025",linetype="1:1 Line-Protect 1,025"), size=1) +
scale_color_manual(name="Guide1",values = c("1:1 Line to Dead Pool"="Black","1:1 Line-Protect 1,025"="Grey","ISG"="Blue", "DCP"="Red"),breaks=c("ISG","DCP","1:1 Line to Dead Pool", "1:1 Line-Protect 1,025"), labels= c("Interim Shortage Guidelines (2008)","Drought Contingency Plan (2019)","1:1 Line to Dead Pool", "1:1 Line-Protect 1,025" )) +
scale_linetype_manual(name="Guide1",values=c("1:1 Line to Dead Pool"="dashed","1:1 Line-Protect 1,025"="dashed","ISG"="longdash","DCP"="solid"), breaks=c("ISG", "DCP","1:1 Line to Dead Pool", "1:1 Line-Protect 1,025"), labels= c("Interim Shortage Guidelines (2008)","Drought Contingency Plan (2019)","1:1 Line to Dead Pool", "1:1 Line-Protect 1,025" )) +
scale_x_continuous(breaks = c(0,5,10,15,20,25),labels=c(0,5,10,15, 20,25), limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$label)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1)) +
ylim(yMin,yMax) +
theme_bw() +
labs(x="Mead Active Storage (MAF)", y="Delivery (MAF per year)") +
theme(text = element_text(size=20),  legend.title = element_blank(), legend.text=element_text(size=18), legend.position = c(0.7,0.5))
ggsave("Fig2-DeliveryVsMeadStorageProtect.jpg",width = 12,
height = 8, units = "in",
dpi = 300)
### Plot 3 - DCP Delivery vs Available Water for varying inflows. Available water is Mead Active Storage + Inflow.
# Create the data frame with deliveries as a function of mead active storage and inflow
cInflows <- c(5,6,7,8,8.5,9) #Million acre-feet per year
dfDeliveries <- dfCutbacks[, c("MeadActiveVolume", "DeliveryDCP", "DeliveryISG")]/1e6
dfDeliveries$Inflow <- 0
dfDeliveries[nrow(dfDeliveries),c("DeliveryDCP","DeliveryISG")] <- NA
dfDeliveriesInflows <- dfDeliveries
for (iFlow in cInflows){
dfDeliveries$Inflow <- iFlow
dfDeliveriesInflows <- rbind(dfDeliveriesInflows,dfDeliveries)
}
#Calculate available water
dfDeliveriesInflows$AvailableWater <- dfDeliveriesInflows$MeadActiveVolume + dfDeliveriesInflows$Inflow
dfDeliveriesInflows$Inflow=as.factor(dfDeliveriesInflows$Inflow)
#Get the blue color bar
pBlues <- brewer.pal(9,"Blues")
#Specify te order for traces on the plot
cBreakOrder <- c("1:1 Line to Dead Pool","1:1 Line-Protect 1,025",cInflows)
cColorVals <- c(pBlues[2],"Grey","Black",pBlues[3:9])
cLineVals <- c("solid","longdash","dashed",rep("solid",times=length(cInflows)))
## Make the plot
ggplot() +
geom_step(data=dfDeliveriesInflows,aes(x=AvailableWater,y=DeliveryDCP, color=Inflow, linetype=Inflow), size=2, direction="vh") +
geom_line(data=dfOneToOne,aes(x=MeadVol,y=Delivery, color="1:1 Line to Dead Pool", linetype="1:1 Line to Dead Pool"), size=1.5) +
geom_line(data=dfProtectLine,aes(x=MeadVol,y=Delivery, color="1:1 Line-Protect 1,025", linetype="1:1 Line-Protect 1,025"), size=1.5) +
scale_color_manual(name="Guide1", values = cColorVals, breaks=cBreakOrder) +
scale_linetype_manual(name="Guide1",values = cLineVals, breaks=cBreakOrder) +
scale_x_continuous(breaks = c(0,5,10,15,20,25),labels=c(0,5,10,15, 20,25), limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$label)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1)) +
ylim(yMin,yMax) +
theme_bw() +
labs(x="Available Water (Mead Active Storage + Inflow) (MAF)", y="Delivery (MAF per year)") +
theme(text = element_text(size=20),  legend.title = element_blank(), legend.text=element_text(size=18), legend.position = c(0.7,0.5))
#ggsave("Fig3-DeliveryVsAvailWater.jpg",width = 12,
#       height = 8, units = "in",
#       dpi = 300)
###############################################################################################
# RUN MEAD SIMULATIONS STARTING AT CURRENT APRIL 2019 storage WITH DIFFERNT cONSTANT INFLOWS ####
#
# Make a plot of reservoir storage (y-axis) over time. Show two zones above and below Mead 1025 ft
###############################################################################################
#Create the master dataframe of results
dfInflowSimulations <- data.frame(Storage=0, Year=0, index=0, Inflow=0, Release=0)
#Mead Initial Storage on April 9, 2019
sMeadApril2019 <- interp1(xi = 1089.74,y=dfMeadElevStor$`Live Storage (ac-ft)`,x=dfMeadElevStor$`Elevation (ft)`, method="linear")
sMeadOct2019 <- interp1(xi = 1083.05,y=dfMeadElevStor$`Live Storage (ac-ft)`,x=dfMeadElevStor$`Elevation (ft)`, method="linear")
sMeadOct2020 <- 10.1*1e6 # Oct 2020 volume ## 7.3*1e6 is long term ending storage at 9 maf per year
sMeadApril2021 <- 9.9*1e6  #April 2021 volume
sMeadStartStorage <- sMeadOct2020
sMeadDeadPool <- interp1(xi = 900,y=dfMeadElevStor$`Live Storage (ac-ft)`,x=dfMeadElevStor$`Elevation (ft)`, method="linear")
#Define start year
startYear <- 2021
#Define the maximum number of iterations. Use an even number so the inflow labels plot nicely
maxIts <- 24
#Define the evaporation rate
eRateToUse <- eRateMoreo[2]
#Loop over steady natural inflow values (stress tests)
for (tInflow in c(7, 8, 8.3, 8.6, 9, 10, 11, 12,14)*1e6){
#tInflow <- 6e6
#debug(TimeToReservoirTarget)
# With lower basin delivery losses
tRes <- TimeToReservoirTarget(Sinit = sMeadStartStorage, inflow = tInflow, deliveryVolume = dfCutbacks$DeliveryDCP,
deliveryResStorage = dfCutbacks$MeadActiveVolume, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, MaxIts = maxIts, sMethodRelease = "constant",
sMinTarget = sMeadDeadPool, sMaxTarget = tMaxVol*1e6, startYear = startYear )
# Without lower basin delivery losses
#tRes <- TimeToReservoirTarget(Sinit = sMeadApril2019, inflow = tInflow, deliveryVolume = dfCutbacks$DeliveryDCP,
#           deliveryResStorage = dfCutbacks$MeadActiveVolume, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
#           ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, MaxIts = maxIts, sMethodRelease = "constant",
#              sMinTarget = 0, sMaxTarget = tMaxVol*1e6, startYear = startYear )
#Append results to dataframe
dfInflowSimulations <- rbind(dfInflowSimulations, tRes$dfTimeResults)
}
#Remove the first dummy row of zeros
dfInflowSimulations <- dfInflowSimulations[2:nrow(dfInflowSimulations),]
# Plot up storage over time for different inflow traces.
dfTimeResults <- dfInflowSimulations
# Calculate Steady Natural Lees Ferry Flow from Mead Inflow
# Lee Ferry Natural Flow = Mead Inflow - Grand Canyon Trib Flows + Upper Basin Demands + Powell Evaporation
ePowellRate <- dfEvapRates %>% filter(Reservoir %in% c("Powell"), Source %in% c("Reclamation")) %>% select(Rate.ft.per.year)
ePowellArea <- interp1(xi = 9e6,x=dfPowellElevStor$`Live Storage (ac-ft)` , y=dfPowellElevStor$`Area (acres)`, method="linear")
GrandCanyonTribFlows <- vMedGCFlow
vMeadInflowToLeeNaturalCorrection <- -GrandCanyonTribFlows + 4e6 + ePowellRate*ePowellArea
dfTimeResults$LeeFerryNaturalFlow <- dfTimeResults$Inflow + as.numeric(vMeadInflowToLeeNaturalCorrection )
#Calculate Powell Release from Mead Inflow
dfTimeResults$PowellRelease <- MeadInflowToPowellRelease(dfTimeResults$Inflow, GrandCanyonTribFlows)
# Select even rows for plotting flow labels
dfTimeResultsEven <- dfTimeResults[seq(4,nrow(dfTimeResults),by=4),]
## Define a polygons that identify the follow:
# 1. Level below Mead 1025 where deliveries are no longer defined by Drought Contingency Plan
# 2. Levels between Mead 1090 and 1025 where deliveries are defined by Drought COntingency Plan
# Define the polygons showing each tier to add to the plot. A polygon is defined by four points in the plot space. Lower-left, Lower-right, upper-right, upper left
# Polygon name
ids <- factor(c("Mead Releases Undefined\nStates Renegotiate","Drought Contingency Plan\nReleases"))
# Polygon corners (see above for defs)
dfPositions <- data.frame(id = rep(ids, each = 4),
Year = c(startYear,startYear+maxIts,startYear+maxIts,startYear,startYear,startYear+maxIts,startYear+maxIts,startYear),
MeadVol = c(0,0,dfMeadValsAdd$value[6],dfMeadValsAdd$value[6],dfMeadValsAdd$value[6],dfMeadValsAdd$value[6],dfMeadValsAdd$value[3],dfMeadValsAdd$value[3]))
#Number of polygons
nPts <- nrow(dfPositions)/4
#Polygon labels
dfPolyLabel <- data.frame(id = ids,
Label = c("Smallest DCP Releases", "Drought Contingency Plan\nReleases"),
DumVal = c(1:nPts))
### New PolyLabel with only one row
dfPolyLabel2 <- data.frame(id = ids[2],
Label = c("Drought Contingency Plan\nReleases"),
DumVal = c(1))
#Calculate midpoints
dfPolyLabel2$MidYear <- 0
dfPolyLabel2$MidMead <- 0
dfPolyLabel2$MidInflow <- mean(c(5,12))
point <- 1
dfPolyLabel2[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#Calculate midpoints for each polygon. This is the average of the cooridinates for
# the polygon
dfPolyLabel$MidYear <- 0
dfPolyLabel$MidMead <- 0
dfPolyLabel$MidInflow <- mean(c(5,12))
for (point in 1:nPts) {
#dfPolyLabel[point,c("MidYear")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#Weighted average for Year to push things to the right of the plot
dfPolyLabel[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
if (point==1) {
dfPolyLabel[point,c("MidMead")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("MeadVol")])
} else {
dfPolyLabel[point,c("MidMead")] = 0.35*dfPositions[(4*(point-1)+1),c("MeadVol")] + 0.65*dfPositions[(4*point),c("MeadVol")]
}
}
# Currently we need to manually merge the two together
dfPolyAll <- merge(dfPolyLabel, dfPositions, by = c("id"))
#Add a variable for the annual inflow max and mins
dfPolyAll$Inflow <- c(5,12,12,5,5,12,12,5)
dfPolyAll$MidInflow <- mean(5,12)
#vertical line to show when the interim guidelines expire
tInterGuideExpire <- 2026
dfIntGuidelinesExpire <- data.frame(Year = c(tInterGuideExpire,tInterGuideExpire), MeadVol <- c(0,tMaxVol))
#Colors for the polygons
palReds <- brewer.pal(9, "Reds") #For plotting DCP tiers
#
#Now do the plot: Storage versus time with different Steady Mead inflow traces. Different DCP zones. And a vertical line showing the end of the Interim Guidelines
ggplot() +
#Polygon zones
geom_polygon(data = dfPolyAll, aes(x = Year, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
#Inflow traces
geom_line(data=dfTimeResults,aes(x=Year,y=Storage/1e6, group = Inflow/1e6, color = (Inflow/1e6)), size=2) +
#Interim guidelines expire
geom_line(data=dfIntGuidelinesExpire,aes(x=Year,y=MeadVol, linetype="IntGuide"), size=3,show.legend = F) +
scale_linetype_manual(name="Guide1", values = c("IntGuide"="longdash"), breaks=c("IntGuide"), labels= c("Interim Guidelines Expire")) +
geom_text(aes(x=tInterGuideExpire, y=25, label="Interim Guidelines\nExpire"), angle = 0, size = 7, hjust="middle") +
#Label the plot
#geom_label(aes(x=2037, y=20, label="Steady Inflow (MAF/year)\n(Stress Test)", fontface="bold"), angle = 0, size = 7) +
#Label the constant inflow contours
#Label inflow traces excluding non-integer traces
geom_label(data=dfTimeResultsEven %>% filter(Inflow %in% seq(7*1e6, 14*1e6, by=1*1e6)), aes( x = Year, y = Storage/1e6, label = Inflow/1e6, fontface="bold", color = Inflow/1e6), size=5, angle = 0) +
#Label non integer inflow traces starting at year 8
geom_label(data=dfTimeResultsEven %>% filter(!(Inflow %in% seq(7*1e6, 14*1e6, by=1*1e6)), index >= 8), aes( x = Year, y = Storage/1e6, label = Inflow/1e6, fontface="bold", color = Inflow/1e6), size=5, angle = 0) +
#Label the polygons
geom_label(data=dfPolyLabel, aes(x = 2041, y = MidMead/1e6, label = Label, fontface="bold", fill=as.factor(dfPolyLabel$DumVal)), size=5, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
#scale_fill_manual(breaks = c(2,1),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
theme_bw() +
labs(x="", y="Mead Active Storage (MAF)", color =  "Natural Inflow\n(MAF/year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20), legend.text=element_text(size=18),
legend.position = "none")
ggsave("Fig4-StorageVsTime-MeadInflow.jpg",width = 12,
height = 8, units = "in",
dpi = 300)
#Calculate the final Mead Elevation
dfTimeResults$Elevation <- interpNA(xi = dfTimeResults$Storage,y=dfMeadElevStor$`Elevation (ft)` , x=dfMeadElevStor$`Live Storage (ac-ft)`, method="linear")
#############################
### Recovery Simulations
### Start at inflow simulation final points and simulate recovery for different larger inflows
#
#   There are two recovery scenarios:
#    1) Start at 2025 at 1,025 feet and look at recovery flows of 8.7 and 9 maf to stabilize Lake Mead or recover it to 1,050 feet.
#    2) Start at 2030 at 1,050 feet and look at recovery flows of 10, 11, and 12 maf each year.
#   The recovery flows can also be looked at as the lake inflow plus additional conservation beyond the DCP target
#
#   Separate simulations are done for each scenarios and stored in separate data frames.
#   Then the two recovery data frames are plotted on the prior plot.
#############################
### Recovery case #1: From 2025 and elevation 1,025 feet.
#For each recovery case, define the key start year, start Mead storage, and inflow scenarios to use
nStartYearRecovery <- 0
dfRecoveryCases <- data.frame(startYear = rep(nStartYearRecovery,2),
sMeadStartStorage = c(6.0*1e6, as.numeric(dfInflowSimulations %>% filter(Year == 2030, Inflow == 9*1e6) %>% select(Storage))),
inflowsToUse = I(list(c(8.65, 9, 10), c(9, 10,11,12))),
Label = c("Recover from 1,025 ft", "Recover from 1,150 ft"))
#Initialize the results data frame
dfRecoverySimulations <- data.frame(Storage=0, Year=0, index=0, Inflow=0, Release=0, Case="", startYear=0)
#Loop over recovery cases
for (iRecovery in 1:nrow(dfRecoveryCases)){
#Define start year
startYear <- dfRecoveryCases$startYear[iRecovery]
#Define the start storage
sMeadStartStorage <- dfRecoveryCases$sMeadStartStorage[iRecovery]
#Define the maximum number of iterations. Use an even number so the inflow labels plot nicely
maxIts <- 16
#Loop over steady natural inflow values (stress tests)
for (tInflow in as.numeric(unlist(dfRecoveryCases$inflowsToUse[iRecovery]))*1e6){
#tInflow <- 10e6
#debug(TimeToReservoirTarget)
# With lower basin delivery losses
tRes <- TimeToReservoirTarget(Sinit = sMeadStartStorage, inflow = tInflow, deliveryVolume = dfCutbacks$DeliveryDCP,
deliveryResStorage = dfCutbacks$MeadActiveVolume, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, MaxIts = maxIts, sMethodRelease = "constant",
sMinTarget = sMeadDeadPool, sMaxTarget = tMaxVol*1e6, startYear = startYear )
# Without lower basin delivery losses
#tRes <- TimeToReservoirTarget(Sinit = sMeadApril2019, inflow = tInflow, deliveryVolume = dfCutbacks$DeliveryDCP,
#           deliveryResStorage = dfCutbacks$MeadActiveVolume, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
#           ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, MaxIts = maxIts, sMethodRelease = "constant",
#              sMinTarget = 0, sMaxTarget = tMaxVol*1e6, startYear = startYear )
#Add fields to help in plotting
tRes$dfTimeResults$Case <- dfRecoveryCases$Label[iRecovery]
tRes$dfTimeResults$startYear <- dfRecoveryCases$startYear[iRecovery]
#Append results to dataframe
dfRecoverySimulations <- rbind(dfRecoverySimulations, tRes$dfTimeResults)
}
}
#Remove the first dummy row of zeros
dfRecoverySimulations <- dfRecoverySimulations[2:nrow(dfRecoverySimulations),]
# Plot up storage over time for different inflow traces.
dfRecoveryTimeResults <- dfRecoverySimulations  %>% filter(Year <= 2045)
#Specify the interval in years to show line labels
nYearInterval <- 5
# Select specifc rows for plotting recovery labels
#First case is on the interval
dfRecoveryTimeResultsInterval <- dfRecoveryTimeResults %>% filter(Case == as.character(dfRecoveryCases$Label[1]) , Year %in% seq(min(dfRecoveryCases$startYear) + nYearInterval,max(dfRecoveryTimeResults$Year) - 1, by=nYearInterval))
dfTemp <- dfRecoveryTimeResults %>% filter(Case == as.character(dfRecoveryCases$Label[2]) , Year %in% seq(min(dfRecoveryCases$startYear) - 2 + nYearInterval,max(dfRecoveryTimeResults$Year) - 1, by=nYearInterval))
#Second case is one year earlier
dfRecoveryTimeResultsInterval <- rbind(dfRecoveryTimeResultsInterval, dfTemp )
#Filter out interger inflows to clean up plot compared to just inflows
dfTimeResultsInteger <- dfTimeResults %>% filter(Inflow %in% seq(7*1e6,10*1e6, by=1e6))
# Select same interval  rows for plotting flow labels
dfTimeResultsInterval <- dfTimeResults %>% filter(Year %in% seq(min(dfRecoveryCases$startYear), max(Year) - 1, by=nYearInterval))
cRecoveryColors <- c(pBlues[6], "Brown","Purple")
pPurples <-  brewer.pal(9,"Purples")
pOranges <- brewer.pal(9,"Oranges")
cRecoveryColors <- c(pPurples[9], pPurples[7],pBlues[7])
cRecoveryColors <- c(pBlues[5], pBlues[7])
#Now the recovery plot: Storage versus time with different Steady Mead inflow traces. Different DCP zones. And a vertical line showing the end of the Interim Guidelines
#Legend does not show, probably because color is not in aes#
xMax <- 15
dfPolyAll$Year2 <- ifelse(dfPolyAll$Year == 2045, xMax, dfPolyAll$Year )
dfPolyAll$Year2 <- ifelse(dfPolyAll$Year2 == 2021, nStartYearRecovery, dfPolyAll$Year2)
ggplot() +
#Polygon zones
geom_polygon(data = dfPolyAll, aes(x = Year2, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
#Inflow trace 1
#geom_line(data=dfTimeResultsInteger %>% filter(Inflow/1e6 == 8, Year <= 2025), aes(x=Year,y=Storage/1e6, group = Inflow/1e6), color = cRecoveryColors[1], size=2) +
#geom_line(data=dfTimeResultsInteger %>% filter(Inflow/1e6 == 9, Year <= 2030), aes(x=Year,y=Storage/1e6, group = Inflow/1e6), color = cRecoveryColors[2], size=2) +
#geom_line(data=dfTimeResultsInteger,aes(x=Year,y=Storage/1e6), color = cRecoveryColors[3], size=2) +
#Recovery case 1
geom_line(data=dfRecoveryTimeResults %>% filter(as.character(Case) == dfRecoveryCases$Label[1]), aes(x=Year,y=Storage/1e6, group = Inflow/1e6), color = cRecoveryColors[1], size=2, linetype = "dashed") +
#Recovery case 2
geom_line(data=dfRecoveryTimeResults %>% filter(as.character(Case) == dfRecoveryCases$Label[2]), aes(x=Year,y=Storage/1e6, group = Inflow/1e6), color = cRecoveryColors[2], size=2, linetype = "longdash") +
#Interim guidelines expire
#geom_line(data=dfIntGuidelinesExpire,aes(x=Year,y=MeadVol, linetype="IntGuide"), size=3,show.legend = F) +
scale_linetype_manual(name="Guide1", values = c("IntGuide"="longdash"), breaks=c("IntGuide"), labels= c("Interim Guidelines Expire")) +
#geom_text(aes(x=tInterGuideExpire, y=25, label="Interim Guidelines\nExpire"), angle = 0, size = 6, hjust="middle") +
#Label the plot
#geom_label(aes(x=2037, y=20, label="Steady Inflow (MAF/year)\n(Stress Test)", fontface="bold"), angle = 0, size = 7) +
#Label the constant inflow contours
#Label inflow traces excluding non-integer traces
#geom_label(data=dfTimeResultsInterval %>% filter(Inflow == 8*1e6, Year <= 2025), aes( x = Year, y = Storage/1e6, label = Inflow/1e6, fontface="bold"),  color = cRecoveryColors[1], size=5, angle = 0) +
#geom_label(data=dfTimeResultsInterval %>% filter(Inflow == 9*1e6, Year < 2030), aes( x = Year, y = Storage/1e6, label = Inflow/1e6, fontface="bold"),  color = cRecoveryColors[2], size=5, angle = 0) +
#Label the recovery case 1 traces
geom_label(data=dfRecoveryTimeResultsInterval %>% filter(Year > startYear, as.character(Case) == dfRecoveryCases$Label[1], !(Inflow/1e6 == 9 & Year == 2035)), aes( x = Year, y = Storage/1e6, label = round(Inflow/1e6, digits = 1), fontface="bold"), color=cRecoveryColors[1], size=5, angle = 0) +
#Label the recovery case 2 traces
geom_label(data=dfRecoveryTimeResultsInterval %>% filter(Year > startYear, as.character(Case) == dfRecoveryCases$Label[2]), aes( x = Year, y = Storage/1e6, label = round(Inflow/1e6, digits = 1), fontface="bold"), color=cRecoveryColors[2], size=5, angle = 0) +
#Label the polygons
geom_label(data=dfPolyLabel, aes(x = xMax-4, y = MidMead/1e6, label = Label, fontface="bold", fill=as.factor(dfPolyLabel$DumVal)), size=4, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
scale_x_continuous(limits = c(nStartYearRecovery,xMax)) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
#scale_fill_manual(breaks = c(2,1),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
guides(fill = "none", color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Year", y="Mead Active Storage (MAF)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20), legend.text=element_text(size=18)) #,
#legend.position = "none")
ggsave("Fig4b-Recovery-MeadInflow.jpg",width = 12,
height = 8, units = "in",
dpi = 300)
####################################################
##### Lake Mead recovery by storage level and inflow
#####
##### A stacked area plot of release vs inflow to keep reservoir storage steady
##### also shows the target, mandatory conservation target, additional conservation
########################################################
# Methods
# 1. Build a data frame for the desired reservoir levels and inflow scenarios
# 2. Calculate storage volume, evaporation, and mandatory conservation target for each storage
# 3. Calculate the release to stabilize reservoir level
# 4. Plot as area
#Step 1. Build data frame
nLowFlow <- 7
cInflowScenRecover <- c(seq(nLowFlow,14, by=0.05))*1e6
cElevations <- c(1025,1030,1045,1050,1075,1090)
nFlowScensRecover <- length(cInflowScenRecover)
nElevations <- length(cElevations)
#Create the dataframe. Pad the last column with extra values so have the same number as inflow elements
dfReleaseToStabilize <- data.frame(Elevation = c(cElevations,rep(cElevations[nElevations], nFlowScensRecover - nElevations)), Inflow = cInflowScenRecover )
#Create combinations of inflow and reservoir elevation
dfReleaseToStabilize <- dfReleaseToStabilize %>% expand(Elevation, Inflow)
#Calculate storage volume from elevation
dfReleaseToStabilize$Volume = interpNA(xi=dfReleaseToStabilize$Elevation, y=  dfMeadElevStor$`Live Storage (ac-ft)`, x=dfMeadElevStor$`Elevation (ft)`, method = "constant")
#Calculate Mandatory target from volume
dfReleaseToStabilize$MandatoryConservationTarget <- interpNA(xi= dfReleaseToStabilize$Elevation, x= dfCutbacks$`Mead Elevation (ft)`, dfCutbacks$TotalDCP, method = "constant")
#Calculate evaporation
dfReleaseToStabilize$Evaporation <- eRateToUse*interpNA(xi = dfReleaseToStabilize$Elevation, x=dfMeadElevStor$`Elevation (ft)`, y=dfMeadElevStor$`Area (acres)`, method = "constant") # Evaporation is a linear interpolation off the reservoir bathymetry curve
#Calculate the release to stabilize
dfReleaseToStabilize$ReleaseToStabilize <- dfReleaseToStabilize$Inflow - dfReleaseToStabilize$Evaporation
#Set the Delivery Target
dfReleaseToStabilize$DeliveryTarget <- vLowerBasinDeliveryTarget
#Reduce the release to stabilze if it starts crowding the DCP target
dfReleaseToStabilize$Release <- ifelse(dfReleaseToStabilize$ReleaseToStabilize > dfReleaseToStabilize$DeliveryTarget - dfReleaseToStabilize$MandatoryConservationTarget,
dfReleaseToStabilize$DeliveryTarget - dfReleaseToStabilize$MandatoryConservationTarget,
dfReleaseToStabilize$ReleaseToStabilize)
#Label and position the traces
dfTraceLabels <- data.frame(Elevation=c(rep(1090,3),rep(1025,3)),Inflow = c(8.5,7.5,8.5,8,7.4,8.5), Release = c(9.6-0.3/2, 8.3, 5,9.6-1.35/2,7.7,5), Label=rep(c("Mandatory conservation", "Additional\nconservation", "Release"),2))
#Calculate the additional conservation needed beyond DCP target
dfReleaseToStabilize$AdditionalConservation <- dfReleaseToStabilize$DeliveryTarget  - dfReleaseToStabilize$MandatoryConservationTarget - dfReleaseToStabilize$Release
dfReleaseToStabilize$AdditionalConservation <- ifelse(dfReleaseToStabilize$AdditionalConservation < 0, 0, dfReleaseToStabilize$AdditionalConservation)
#Melt the selected plot columns
dfReleaseToStabilizeMelt <- melt(dfReleaseToStabilize, id.vars = c("Elevation", "Volume", "Inflow"), measure.vars = c("MandatoryConservationTarget","AdditionalConservation","Release") )
#Create a data frame to right label the y-axis
dfReleaseLabels <- data.frame(Release = c(vLowerBasinDeliveryTarget,vLowerBasinDeliveryTarget - max(dfReleaseToStabilize$MandatoryConservationTarget),600000),
Label = c("Target\nrelease","Max. mandatory\n conservation", "Havasu/Parker\nevap. + ET"))
ggplot(data = dfReleaseToStabilizeMelt %>% filter(Elevation %in% c("1025","1090"))) +
#The main types
geom_area(aes(x=Inflow/1e6, y=value/1e6, fill=variable)) +
#Overplot a line for the line of releases to stabilize inflow
geom_line(data=dfReleaseToStabilize %>% filter(Elevation %in% c("1025","1090")), aes(x=Inflow/1e6, y = ReleaseToStabilize/1e6), linetype = "longdash", size = 2, color = pBlues[8]) +
#Labelthe  line of release to stabilize reservoir level
geom_text(aes(x=8.5, y=7.8, label="Release to stabilize reservoir level"), size=5, color=pBlues[8], angle = -19) +
#label the traces
geom_text(data=dfTraceLabels, aes(x = Inflow, y = Release, label = Label), size=5) +
facet_wrap( ~ Elevation) +
#Limit the x-axis to reasonable inflows
#xlim(7,10) +
#Reverse x-axis so go from High to Low
scale_x_reverse(limits = c(10,nLowFlow)) +
scale_y_continuous(limits = c(0,10), breaks = seq(0,10,by=2), sec.axis = sec_axis(~. +0, name = "", breaks = dfReleaseLabels$Release/1e6, labels = dfReleaseLabels$Label)) +
scale_fill_manual(values = c("Red","Pink", pBlues[4]), labels = c("Mandatory conservation\ntarget", "Additional conservation", "Release")) +
#Add line annotations
#Horizonal line for Havasu Parker
geom_hline(yintercept = dfReleaseLabels$Release[3]/1e6, linetype = "dashed", size = 1.25, color = pBlues[9]) +
#Sloped line for release to stabalize level
#geom_abline(slope = -1, intercept =-0.4, linetype = "longdash", size = 2 ) +
theme_bw() +
labs(x="Inflow (MAF per year)", y="Release\n(MAF per year)", fill="") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20), legend.text=element_text(size=18), legend.position = "none")
View(dfReleaseToStabilize)
