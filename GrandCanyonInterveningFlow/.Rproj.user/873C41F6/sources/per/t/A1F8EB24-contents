---
title: "Grand Canyon Intervening Flows"
author: "David E. Rosenberg"
date: "May 10, 2021"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Description

This is an R Markdown document. This document uses the USBR Natural Flow Database (1907 to 2016) and USGS data (1990 to present) to show Grand Canyon Intervening Flows from Lake Powell to Lake Mead. This analysis includes variations in flows, correlations to Lee Ferry natural flows, and sequence average values using the method of Salehabadi and Tarboton (2020). 

The Natural Flow data include:

 1. Paria River
 2. Little Colorado River
 3. Virgin River
 4. Seeps, springs, etc. into the Colorado River between Lee Ferry and Lake Mead
 
The same intervening flows are estimated from USGS data as:
 + (Colorado River near Peach Springs [9404200] - Colorado River at Lees Feery [9382000] + Virign River at Littlefield [9415000] )
 
Four plots show:

 1. Box and whiskers of total intervening flow by the two methods. The Natural Flow data are split before and after 1990.
 2. Correlation of Grand Canyon intervening flows to Lee Ferry natural flow. Again by method and 
 3. Sequence Average plot of intervening flow from the Natural Flow dataset using code of Salehabadi and Tarbotton (2020)
 4. Sequence Average plot of intervening flow from the USGS data using code of Salehabadi and Tarbotton (2020)

## Findings

 1. Grand Canyon tributary flows are commonly discussed as 0.8 to 1.0 maf per year. That range is reasonable for the USGS data and Natural Flow data set from 1905 to 1989. Natural flow dataset from 1990 to 2016 is much lower (Figure 1)
 2. There are variations of +/- 0.25 maf per year or larger in the USGS gaged flows. That is, it may not be possible to forecast Grand Canyon intervening flows for the next year more precisely than 0.25 maf per year. That is a forecast error of ~ 25%
 3. There are 3-, 4- and 5- year sequences in the USGS data, including periods starting in 2000, 2001, and 2002, when Grand Canyon intervening flows averaged 0.6 to 0.7 maf per year for the period. That is 0.3 to 0.4 maf per year lower than the average value.
 4. There were similar 3-, 4-, and 5- year sequences in the Natural Flow data where intervening flow hovered around 0.25 maf per year.
 5. Grand Canyon intervening flows are a critical component of inflow to Lake Mead . Their variability and uncertainty should be considered in Lake Mead operations.

## Requested Citation
David E. Rosenberg (2021), "Grand Canyon Intermediary Flows." Utah State University. Logan, Utah. https://github.com/dzeke/ColoradoRiverCoding/blob/main/GrandCanyonInterveningFlow/GrandCanyonTribFlow.pdf

## References
Homa Salehabadi and David Tarboton (2020), "Sequence-Average and Cumulative Flow Loss Analyses for Colorado River Streamflow at Lees Ferry." Hydroshare. http://www.hydroshare.org/resource/bbe8dffacb07458783b2e6924aa615bb. 	


```{r GCFlows, echo=FALSE, warning=FALSE, message=FALSE}

#####
#     Grand Canyon Intervening flows
#     
#     Grand Canyon intervening flows are sum of Paria, Little Colorado River, Virgin, and Powell to Virgin natural flows
#     in the USBR Natural Flow database
#
#     Produces 3 plots:
#
#       1. Box and whiskers of flow
#       2. Correlation with Lee Ferry Natural Flow
#       3. Dotty plot of Salehabadi and Tarboton (2020)
#
#
#     David E. Rosenberg
#     May 10, 2021
#     Utah State University
#     david.rosenberg@usu.edu
#
#####


rm(list = ls())  #Clear history

# Load required libraies

if (!require(tidyverse)) { 
  install.packages("tidyverse", repos="http://cran.r-project.org") 
  library(tidyverse) 
}

if (!require(readxl)) { 
  install.packages("readxl", repos="http://cran.r-project.org") 
  library(readxl) 
}

if (!require(RColorBrewer)) { 
  install.packages("RColorBrewer",repos="http://cran.r-project.org") 
  library(RColorBrewer) # 
}

if (!require(dplyr)) { 
  install.packages("dplyr",repos="http://cran.r-project.org") 
  library(dplyr) # 
}

if (!require(expss)) { 
  install.packages("expss",repos="http://cran.r-project.org") 
  library(expss) # 
}

if (!require(reshape2)) { 
  install.packages("reshape2", repos="http://cran.r-project.org") 
  library(reshape2) 
}

if (!require(pracma)) { 
  install.packages("pracma", repos="http://cran.r-project.org") 
  library(pracma) 
}

if (!require(lubridate)) { 
  install.packages("lubridate", repos="http://cran.r-project.org") 
  library(lubridate) 
}

if (!require(directlabels)) { 
  install.packages("directlabels", repo="http://cran.r-project.org")
  library(directlabels) 
}

if (!require(plyr)) { 
  install.packages("plyr", repo="http://cran.r-project.org")
  library(plyr) 
}

if (!require(ggplot2)) { 
  install.packages("ggplot2", repo="http://cran.r-project.org")
  library(ggplot2) 
}


### Read in the Natural Flow data and convert it to annual flows
sExcelFileGrandCanyonFlow <- 'HistoricalNaturalFlow.xlsx'
dfGCFlows <- read_excel(sExcelFileGrandCanyonFlow, sheet = 'Total Natural Flow',  range = "U1:Z1324")
dfGCDates <- read_excel(sExcelFileGrandCanyonFlow, sheet = 'Total Natural Flow',  range = "A1:A1324")

#Merge and combine into one Data frame
dfGCFlows$Date <- dfGCDates$`Natural Flow And Salt Calc model Object.Slot`

#Calculate Grand Canyon Tributary flows as sum of Paria, Little Colorado Riverr, Virgin, and intervening flows
#Just tribs (without intervening)
#dfGCFlows$Total <- dfGCFlows$`CoRivPowellToVirgin:PariaGains.LocalInflow` + dfGCFlows$`CoRivPowellToVirgin:LittleCoR.LocalInflow` + 
#                          dfGCFlows$VirginRiver.Inflow

#Tribs + Gains above Hoover
dfGCFlows$Total <- dfGCFlows$`CoRivPowellToVirgin:PariaGains.LocalInflow` + dfGCFlows$`CoRivPowellToVirgin:LittleCoR.LocalInflow` + 
  dfGCFlows$VirginRiver.Inflow + dfGCFlows$`CoRivVirginToMead:GainsAboveHoover.LocalInflow` - dfGCFlows$`CoRivPowellToVirgin:GainsAboveGC.LocalInflow`

dfGCFlows$Year <- year(dfGCFlows$Date)
dfGCFlows$Month <- month(as.Date(dfGCFlows$Date,"%Y-%m-%d"))
dfGCFlows$WaterYear <- ifelse(dfGCFlows$Month >= 10,dfGCFlows$Year,dfGCFlows$Year + 1)


#Convert to Water Year and sum by water year
dfGCFlowsByYear <- aggregate(dfGCFlows$Total, by=list(Category=dfGCFlows$WaterYear), FUN=sum)
dfLeeFerryByYear <- aggregate(dfGCFlows$`HistoricalNaturalFlow.AboveLeesFerry`, by=list(Category=dfGCFlows$WaterYear), FUN=sum)

#Change the Names
colnames(dfGCFlowsByYear) <- c("WaterYear","GCFlow")
colnames(dfLeeFerryByYear) <- c("WaterYear", "LeeFerryNaturalFlow")
dfGCFlowsByYear$LeeFerryNaturalFlow <- dfLeeFerryByYear$LeeFerryNaturalFlow


### Read in the USGS gaged data

sExcelFileUSGSFlow <- 'USGSInterveningFlowData.xlsx'
dfGCFlowsUSGS <- read_excel(sExcelFileUSGSFlow, sheet = 'Combined',  range = "A1:D32")
cColNames <- colnames(dfGCFlowsUSGS)
cColNames[1] <- "WaterYear"
cColNames[2] <- "LeeFerryFlow"
colnames(dfGCFlowsUSGS) <- cColNames

#Calculate the total
dfGCFlowsUSGS$GCFlow <- dfGCFlowsUSGS$`Colorado River near Peach Springs` - dfGCFlowsUSGS$LeeFerryFlow + dfGCFlowsUSGS$`Virgin River at Littlefield`

#Natural flow
dfGCFDataToUse <- dfGCFlowsByYear
dfGCFDataToUse$GCFlow <- dfGCFDataToUse$GCFlow/1e6
dfGCFDataToUse$LeeFerryNaturalFlow <- dfGCFDataToUse$LeeFerryNaturalFlow/1e6
dfGCFDataToUse$Source <- 'Natural Flow'

#USGS data
#Pull in the correct columns
dfGCFDataToUse2 <- as.data.frame(dfGCFlowsUSGS[,c(1,5)])
#Assign the Lee Ferry Natural Flow by year
dfGCFDataToUse2 <- left_join(dfGCFDataToUse2, dfGCFDataToUse[,c("WaterYear","LeeFerryNaturalFlow")], by=c("WaterYear" = "WaterYear"))
#Sort smallest year to largest year
dfGCFDataToUse2 <- dfGCFDataToUse2[order(dfGCFDataToUse2$`WaterYear`),]
dfGCFDataToUse2$Source <- 'USGS'

#Bind the two data sets together
dfGCFDataToUse <- rbind(dfGCFDataToUse, dfGCFDataToUse2)

```

# Figure 1. Grand Canyon intervening flow (Lees Ferry to Lake Mead) (time series)
```{r ICSFig1, echo=FALSE, warning=FALSE, message=FALSE}

#### Figure 1 - Time series

ggplot() +
  #Data after 1989
  geom_line(data = dfGCFDataToUse, aes(x=WaterYear , y=GCFlow, color=Source, linetype=Source), size=1.5) +
  theme_bw() +
  
  scale_color_manual(values = c("Red", "Blue")) +
  scale_linetype_manual(values = c("solid","longdash")) +
  
  #Make one combined legend
  guides(color = guide_legend(""), linetype = guide_legend("")) +
  
  theme_bw() +
  
  labs(x="", y="Grand Canyon Intervening Flow\n(MAF per year)", color="") +
  #theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
  #      legend.position = c(0.8,0.7))
  theme(text = element_text(size=20))


```

# Figure 2. Grand Canyon intervening flow (Lees Ferry to Lake Mead) (box plot)
```{r ICSFig2, echo=FALSE, warning=FALSE, message=FALSE}

#### Figure 2 - Plot Grand Canyon Tributary Inflows as a box-and-whiskers
#Plot as a box-and whiskers

ggplot() +
  #Data after 1989
  geom_boxplot(data = dfGCFDataToUse %>% filter(WaterYear >= 1990), aes(x=Source , y=GCFlow, fill=Source)) +
  theme_bw() +
  
  #Data before 1990
  geom_boxplot(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x="Before 1990 Natural Flow" , y=GCFlow, fill="Before 1990 Natural Flow")) +
  
  scale_x_discrete(labels = c("Natural Flow" = "Natural Flow\n(1990 to 2016)", "Before 1990 Natural Flow" = "Natural Flow\n(1905 to 1989)", "USGS" = "USGS\n(1990 to 2016)") ) +
  scale_fill_manual(values = c("Pink", "Red", "Blue")) +
  
  theme_bw() +
  
  labs(x="", y="Grand Canyon Intervening Flow\n(MAF per year)") +
  #theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
  #      legend.position = c(0.8,0.7))
  theme(text = element_text(size=20), 
        legend.position = "none")

```

# Figure 3. Correlation between Grand Canyon intervening flow and Lee Ferry natural flow
```{r ICSFig3, echo=FALSE, warning=FALSE, message=FALSE}

#### Figure 2. Show the correlation between Grand Canyon Flow and Lee Ferry Flow
#
ggplot() +
  #Points after 1990 in Blue and Red
  geom_point(data = dfGCFDataToUse %>% filter(WaterYear >= 1990), aes(x= LeeFerryNaturalFlow, y=GCFlow, color=Source, shape=Source), size=4) +
  
  geom_point(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x= LeeFerryNaturalFlow, y=GCFlow, color="Natural Flow pre 1990", shape="Natural Flow pre 1990"), size=4) +

  scale_shape_manual(values=c(17,16,16), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels = c("USGS (1990 to 2020)","Natural Flow (1990 to 2016)","Natural Flow (1905 to 1989)")) +
  
  scale_color_manual(values=c("Blue","Red","Pink"), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (1990 to 2020)","Natural Flow (1990 to 2016)","Natural Flow (1905 to 1989)")) +
  
  #Make one combined legend
  guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
  
  #facet_wrap( ~ Source) +
  labs(x="Lee Ferry Natural Flow\n(MAF per year)", y="Grand Canyon Intervening Flows\n(MAF per year)") +
  #theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
  #      legend.position = c(0.8,0.7))
  
  theme_bw() +  
  theme(text = element_text(size=14))

## Show the correlation matrix
mCorr <- cor(as.data.frame(dfGCFDataToUse %>% filter(WaterYear >= 1990, Source == "Natural Flow") %>% select(LeeFerryNaturalFlow,GCFlow)))
print(paste("Correlation in Natural Flow after 1990 = ",round(mCorr[1,2],2)))
mCorr <- cor(as.data.frame(dfGCFDataToUse %>% filter(WaterYear >= 1990, Source == "USGS") %>% select(LeeFerryNaturalFlow,GCFlow)))
print(paste("Correlation in USGS after 1990 = ",round(mCorr[1,2],2)))

```

# Figures 4 and 5. Sequence average flows for USGS (1990-2020) and Natural Flow (1905-2016) data sets
```{r ICSFig4, echo=FALSE, warning=FALSE, message=FALSE}


#### Figures 3 and 4. Show the sequence average plot using Salehabadi code for Natural Flow data set and USGS data

############################################################################################################
###### Sequence Average Plot (Dotty Plot)                                                             ######
######  - creat the Sequence-Average plot (blue dots: full period,  red dots: post-yr period)         ######                                      
######  - Add the long term average of the flow over the full and post-yr periods as horizontal lines ######
######                                                                                                ######
######  Homa Salehabadi                                                                               ###### 
############################################################################################################

# This may not be needed if already installed.
#install.packages("openxlsx") 
library(openxlsx)

#####==================================================================================================================
##### Inputs (change them if needed) ==================================================================================

## Set working directory if necessary e.g.
# setwd("H:/Homa/PhD/Research/Works/SeqAvePlots")

##### n.lowest function: find the nth lowest value (or index) in x ====================================================

n.lowest <- function(x,n,value=TRUE){
  s <- sort(x,index.return=TRUE)
  if(value==TRUE)  {s$x[n]}  else  {s$ix[n]}    ## TRUE: n.lowest=value   FALSE: n.lowest=index
} 


# Natural Flow Plot
## Input Files ------------------------------------------------------------------------------
#filename1 <- "R_InputData.xlsx"
#sheetname1 <-  "AnnualWYTotalNaturalFlow_LF2018"    ## Natural flow: "AnnualWYTotalNaturalFlow_LF2018"   ## Tree ring: "TR_Meko_2017-SK"

#A data frame to loop over
dfDataTypes <- data.frame(Source = c("USGS","Natural Flow"), minY = c(0.5,0.0), maxY = c(2,2))

for(iType in (1:nrow(dfDataTypes))) {
  
   # iType <- 2

    ### Pull the data into the data data frame for plotting
    data <- dfGCFDataToUse %>% filter(Source == dfDataTypes$Source[iType])
    
    ## Factor to change the current unit --------------------------------------------------------
    unit_factor <- 1 #10^(-6)   ## ac-ft to MAF
    
    ## Maximum length of sequence (sequences will be from 1 to seq_yr) --------------------------
    seq_yr <- 15 ## 25
    
    ## desired period ---------------------------------------------------------------------------
    #yr1 <- 1990   ## NF:1906   TR:1416       
    #yr2 <- 2016   ## NF:2018   TR:2015    
      
    ## A year to devide the period into two period.  --------------------------------------------
    post_year <- 2000   ## post-year will be distinguished in plot
    
    #desired period is the min and max water years
    yr1 <- min(data$WaterYear)
    yr2 <- max(data$WaterYear)
    
    
    #data <- read.xlsx(filename1, sheet=sheetname1, colNames=TRUE)
    #data <- read.csv(file = "GrandCanyonFlows.csv", header = TRUE, sep =",", strip.white = TRUE)
    years <- yr1:yr2
    n <- length(years)
    
    
    #### Sequence Average plot ###########################################################################################     
    ####   - creat the Sequence-Average plot                                                 
    ####   - add the long term average of the flow over the full and post-yr periods as horizontal lines
    ####
    #### >> Check Legend if needed  
    
    ## take the flow data ------------
    flow <- data[ which(data[,1]==yr1):which(data[,1]==yr2) ,(2)]
    
    ## define empty matrixes -------------
    Mean<- matrix(rep(NA), nrow=n , ncol=seq_yr)
    lowest <- matrix(rep(NA), nrow=n , ncol=seq_yr)
    lowest_index <- matrix(rep(NA), nrow=n , ncol=seq_yr)
    lowest_year <- matrix(rep(NA), nrow=n , ncol=seq_yr)
    
    ## calculate the averages over the sequences---------------
    ## Loop: over the defined sequences
    for (m_yr in 1:seq_yr){  
      
     # print(m_yr)
      
      mean_m_yr <- rep(NA)
      sort <- rep(NA)
      
      for (m in 1:(n-(m_yr-1))){
        mean_m_yr[m] <- mean( flow[ m : (m+(m_yr-1)) ] )
        Mean[m ,m_yr] <- mean_m_yr[m]
        
       # print(paste("m: ",m))
      }
      
      for (m in 1:(n-(m_yr-1))){
        lowest[m ,m_yr] <- n.lowest( mean_m_yr,m,value=TRUE)
        lowest_index[m ,m_yr] <- n.lowest(mean_m_yr,m,value=FALSE)   
        lowest_year[m ,m_yr] <- years[lowest_index[m ,m_yr]]
      }
      
    }
    
    
    ## change unit to MAF ----------------------
    lowest_MAF <- lowest*unit_factor  
    
    ###### Plot SeqAve (dotty plots) ==========================================================================
    
    ## the final dataframe that you want its dotty plot will be SeqAve
    SeqAve <- lowest_MAF
    
    ## will be used to plot with a better scale:
    min <- 0.5 #floor(min(SeqAve, na.rm=TRUE))
    max <- ceiling(max(SeqAve, na.rm=TRUE))
    
    min <- dfDataTypes$minY[iType]
    #max <- dfDataTypes$maxY[iType]
    
    ##### plot -----------------------------------------------------------
    x <- c(1:seq_yr)
    par(mar=c(5, 4, 3, 2) + 0.2 , mgp=c(2.5, 1, 0) )
    
    ## 1- For natural flow run this:
    plot(x, SeqAve[1,], col="white", ylim=c(min, max) , xlim=c(1, seq_yr+1), xaxt="n" ,yaxt="n",
         pch=16, cex=0.6, xlab="Length of sequence (year)", ylab="Mean flow (maf)", cex.lab=1.3, 
         main=paste0("Grand Canyon Tributary Flow (Powell to Mead),  Period: " ,yr1,"-",yr2,paste0("\n",dfDataTypes$Source[iType]," Data")) )  ## , cex.main=1.3
    
    ### axis of the plot -------
    axis(1, at=seq(1,seq_yr,1), cex.axis=1)
    axis(2, at=seq((min-2),max,0.25), cex.axis=1, las=1)  ## las=1 to rotate the y lables
    
    
    ### plot dots and seperate them to blue and red ones ---------
    
    ## full period
    for (j in 1:seq_yr){  
      for (i in 1:(n-(j-1))){  #1:n
        points(j, SeqAve[i,j], col= "lightskyblue2" ,pch=1, cex=0.5, lwd=1)
      }
    }
    
    ## specify post-yr period
    for (j in 1:seq_yr){  
      for (i in 1:(n-(j-1))){  #1:n
        
        if ( lowest_year[i,j]>=post_year) {
          points(j, SeqAve[i,j], col= "black" ,bg="red" ,pch=21, cex=0.7, lwd=0.2)
        }
      }
    }
    
    
    ### add a line representing the long-term average of flow during the full period -----------
    ave_all <- mean(flow)* unit_factor
    abline (ave_all, 0, col="steelblue2", lwd=1.2)
    
    ### add a line representing the long-term average of flow during the post-yr period 
    while(post_year<=yr2){
      ave_post <- mean(flow[(which(years==post_year) : which(years==yr2))] ) * unit_factor
      abline (ave_post, 0, col="red", lwd=1.2)
      break}
    
    
    ### lable the two lines of long-term average -----------
    if(post_year<=yr2){
      if(ave_all>ave_post){
        text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
        text((seq_yr+0.2),(ave_post-0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
      }
      if(ave_all<ave_post){
        text((seq_yr+0.2),(ave_all-0.4), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
        text((seq_yr+0.2),(ave_post+0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
      }
    } else {
      text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)
    }
    
    
    ### lable the first and second lowest SeqAve ----------
    text(SeqAve[1,]~x, labels=lowest_year[1,], pos = 1, cex=0.6, col="black", srt=0) ## the lowest     (vertical text: srt=90)
    text(SeqAve[2,]~x, labels=lowest_year[2,], pos = 2, cex=0.5, col="gray47", srt=0)  ## the second lowest
    
    
    ### 1- Legend for natural flow 1906-2018 -----------
    legend("topright", legend=c(paste0("Full Period (",yr1,"-",yr2,")"),paste0("Post-",post_year,"(",post_year,"-",yr2,")"), paste0("Long term mean (",yr1,"-",yr2,")"),  paste0("Long term mean (",post_year,"-", yr2,")")),
           col=c("lightskyblue3","black","steelblue2","red"), pt.bg=c(NA,"red", NA,NA) , pch=c(1,21, NA, NA), pt.cex=c(0.6, 0.8),
           lwd=1,  lty=c(0,0,1,1), inset=c(0.05, 0.03), bty = "n")
}

```













