---
title: "Combined Lake Powell-Lake Mead Plots"
author: "David E. Rosenberg"
date: "October 21, 2021"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Description

This is an R Markdown document. This document shows plots of combined Lake Powell-Lake Mead storage over time.

1. Line plot of the Lake Mead, Lake Powell, and combined storage over time. 

2. A stacked area plot shows combined storage of Lake Powell and Lake Mead over time in comparison to Lake Mead conservation account balances, combined protection volume, and 2026 expiration of Interim Guidelines. Combined storage is split between Lake Mead conservation accounts and public pools in Lake Powell and Lake Mead. Within the public pool, a thin line shows the historical split between Lake Powell and Lake Mead (current operations).

3. A stacked area plot of combined storage divided into flex accounts and the shared water reserve.

4. A stacked area plot of Lake Mead storage shows the division between the public pool and conservation account amounts.

Data are from: 

1. Storage elevation curves for Lake Powell and Lake Mead: Colorado River Simulation System (Wheeler et al 2019). MeadDroughtContingencyPlan.xlsx.

2. Lake Powell storage: USBR (2021). "Water Operations: Historic Data, Upper Colorado River Division." U.S. Buruea of Reclamation. https://www.usbr.gov/rsvrWater/HistoricalApp.html (PowellDataUSBROct2021.csv).

3. Lake Mead storage: USBR (2021). "LAKE MEAD AT HOOVER DAM, END OF MONTH ELEVATION (FEET)". Lower COlorado River Operations, U.S. Buruea of Reclamation https://www.usbr.gov/lc/region/g4000/hourly/mead-elv.html (MeadLevelOct2021.xlsx).

4. Lake Mead conservation account balances : USBR (2020). "Boulder Canyon Operatoins Office - Program and Activites: Water Accounting Reports".  https://www.usbr.gov/lc/region/g4000/wtracct.html. (IntentionallyCreatedSurplus-Summary.xlsx)


## Requested Citation
David E. Rosenberg (2021), "Combined Lake Powell-Lake Mead plots." Utah State University. Logan, Utah. https://github.com/dzeke/ColoradoRiverFutures/tree/master/CombinedPowellMead.

```{r CombinedPlot1, echo=FALSE, warning=FALSE, message=FALSE}

# CombinedPowellMead.R
#
# Plots that show the combined storage of Lake Powell and Lake Mead.
#
# 1. Import the reservoir elevation-volume curves
# 2. Import historical reservoir storage data
# 3. Import the conservation account data for Lake Mead
#
# This is a beginning R-programming effort! There could be lurking bugs or basic coding errors that I am not even aware of.
# Please report bugs/feedback to me (contact info below)
#
# David E. Rosenberg
# July 6, 2021
# Utah State University
# david.rosenberg@usu.edu

rm(list = ls())  #Clear history

# Load required libraies

if (!require(tidyverse)) { 
  install.packages("tidyverse", repos="http://cran.r-project.org") 
  library(tidyverse) 
}

if (!require(readxl)) { 
  install.packages("readxl", repos="http://cran.r-project.org") 
  library(readxl) 
}

  
if (!require(RColorBrewer)) { 
  install.packages("RColorBrewer",repos="http://cran.r-project.org") 
  library(RColorBrewer) # 
}

if (!require(dplyr)) { 
  install.packages("dplyr",repos="http://cran.r-project.org") 
  library(dplyr) # 
}

if (!require(expss)) { 
  install.packages("expss",repos="http://cran.r-project.org") 
  library(expss) # 
}

if (!require(reshape2)) { 
  install.packages("reshape2", repos="http://cran.r-project.org") 
  library(reshape2) 
}

if (!require(pracma)) { 
  install.packages("pracma", repos="http://cran.r-project.org") 
  library(pracma) 
}

if (!require(lubridate)) { 
  install.packages("lubridate", repos="http://cran.r-project.org") 
  library(lubridate) 
}

if (!require(directlabels)) { 
  install.packages("directlabels", repo="http://cran.r-project.org")
  library(directlabels) 
}


if (!require(plyr)) { 
  install.packages("plyr", repo="http://cran.r-project.org")
  library(plyr) 
}

if (!require(ggrepel)) { 
  devtools::install_github("slowkow/ggrepel")
  library(ggrepel) 
}



# New function interpNA to return NAs for values outside interpolation range (from https://stackoverflow.com/questions/47295879/using-interp1-in-r)
interpNA <- function(x, y, xi = x, ...) {
  yi <- rep(NA, length(xi));
  sel <- which(xi >= range(x)[1] & xi <= range(x)[2]);
  yi[sel] <- interp1(x = x, y = y, xi = xi[sel], ...);
  return(yi);
}



###This reservoir data comes from CRSS. It was exported to Excel.

# Read elevation-storage data in from Excel
sExcelFile <- 'MeadDroughtContingencyPlan.xlsx'
dfMeadElevStor <- read_excel(sExcelFile, sheet = "Mead-Elevation-Area",  range = "A4:D676")
dfPowellElevStor <- read_excel(sExcelFile, sheet = 'Powell-Elevation-Area',  range = "A4:D689")

# Read in Reservoir Pools Volumes / Zones from Excel
dfPoolVols <- read_excel(sExcelFile, sheet = "Pools",  range = "D31:O43")
# Read in Reserved Flood Storage
dfReservedFlood <- read_excel(sExcelFile, sheet = "Pools",  range = "C46:E58")
#Convert dates to months
dfReservedFlood$month_num <- month(as.POSIXlt(dfReservedFlood$Month, format="%Y-%m-%Y"))

### This historical reservoir level data comes from USBR websites.

# File name to read in historical Powell Volume from CSV (download from USBR)
#    Water Operations: Historic Data, Upper Colorado River Division, U.S. Buruea of Reclamation
#    https://www.usbr.gov/rsvrWater/HistoricalApp.html

sPowellHistoricalFile <- 'PowellDataUSBRJan2019.csv'
sPowellHistoricalFile <- 'PowellDataUSBRMay2021.csv'
sPowellHistoricalFile <- 'PowellDataUSBROct2021.csv'

# File name to read in Mead end of month reservoir level in feet - cross tabulated by year (1st column) and month (subsequent columns)
#    LAKE MEAD AT HOOVER DAM, END OF MONTH ELEVATION (FEET), Lower COlorado River Operations, U.S. Buruea of Reclamation
#    https://www.usbr.gov/lc/region/g4000/hourly/mead-elv.html

sMeadHistoricalFile <- 'MeadLevel.xlsx'
sMeadHistoricalFile <- 'MeadLevelOct2021.xlsx'

# Read in the historical Powell data
dfPowellHistorical <- read.csv(file=sPowellHistoricalFile, 
                               header=TRUE, 
                               
                               stringsAsFactors=FALSE,
                               sep=",")

# Read in the historical Mead data
dfMeadHistorical <- read_excel(sMeadHistoricalFile)

#Convert cross-tabulated Mead months into timeseries
dfMeadHist <- melt(dfMeadHistorical, id.vars = c("Year"))
dfMeadHist$BeginOfMonStr <- paste(dfMeadHist$Year,dfMeadHist$variable,"1",sep="-")
dfMeadHist$BeginOfMon <- as.Date(dfMeadHist$BeginOfMonStr, "%Y-%b-%d")
dfMeadHist$BeginNextMon <- dfMeadHist$BeginOfMon %m+% months(1)
#Filter out NAs
dfMeadHist <- dfMeadHist %>% filter(!is.na(dfMeadHist$value))
#Filter out low storages below min
dfMeadHist <- dfMeadHist %>% filter(dfMeadHist$value > min(dfMeadElevStor$`Elevation (ft)`))
dfMeadHist$Stor <- interp1(xi = dfMeadHist$value,y=dfMeadElevStor$`Live Storage (ac-ft)`,x=dfMeadElevStor$`Elevation (ft)`, method="linear")

#Interpolate Powell storage from level to check
dtStart <- as.Date("1963-12-22")
dfPowellHist <- dfPowellHistorical[15:708,] #%>% filter(dfPowellHistorical$Date >= dtStart) # I don't like this hard coding but don't know a way around
#Convert NAs to zeros
dfPowellHist[is.na(dfPowellHist)] <- 0
#Convert date text to date value
dfPowellHist$DateAsValueError <- as.Date(dfPowellHist$Date,"%d-%b-%y")
#Apparently R breaks the century at an odd place
#Coerce the years after 2030 (really 1930) to be in prior century (as.Date conversion error)
dfPowellHist$Year <- as.numeric(format(dfPowellHist$DateAsValueError,"%Y"))
dfPowellHist$DateAsValue <- dfPowellHist$DateAsValueError
#dfPowellHist$DateAsValue[dfPowellHist$Year > 2030] <- dfPowellHist$DateAsValue[dfPowellHist$Year > 2030] %m-% months(12*100)
#dfPowellHist$StorCheck <- interp1(xi = dfPowellHist$Elevation..feet.,y=dfPowellElevStor$`Live Storage (ac-ft)`,x=dfPowellElevStor$`Elevation (ft)`, method="linear")
#dfPowellHist$StorDiff <- dfPowellHist$Storage..af. - dfPowellHist$StorCheck

#Merge the Mead and Powell Storage Time series
dfJointStorage <- merge(dfPowellHist[,c("DateAsValue","Storage..af.","Total.Release..cfs.")],dfMeadHist[,c("BeginNextMon","Stor")],by.x = "DateAsValue", by.y="BeginNextMon", all.x = TRUE, sort=TRUE)
#Rename columns so they are easier to distinquish
dfJointStorage$PowellStorage <- dfJointStorage$Storage..af./1000000
dfJointStorage$PowellRelease <- dfJointStorage$Total.Release..cfs.
dfJointStorage$MeadStorage <- dfJointStorage$Stor/1000000
#dfJointStorage$DateAsValue <- as.Date(dfJointStorage$Date,"%d-%b-%y")
#Remove the old columns
dfJointStorage <- dfJointStorage[, !names(dfJointStorage) %in% c("Storage..af.","Total.Release..cfs.","Stor")]
#Add a column for decade
dfJointStorage$decade <- round_any(as.numeric(format(dfJointStorage$DateAsValue,"%Y")),10,f=floor)
#dfJointStorage$DecadeAsClass <- dfJointStorage %>% mutate(category=cut(decade, breaks=seq(1960,2020,by=10), labels=seq(1960,2020,by=10)))

# Define maximum storages
dfMaxStor <- data.frame(Reservoir = c("Powell","Mead"),Volume = c(24.32,25.9))


```

# Figure 1. Lake Mead, Lake Powell, and combined storage over time
```{r CombinedFig1, echo=FALSE, warning=FALSE, message=FALSE}

#################################################
#### COMBINED POWELL AND MEAD STORAGE OVER TIME
#################################################

# Combined, Powell, and Mead on one plot
ggplot() +
  #Powell storage
  geom_line(data=dfJointStorage,aes(x=DateAsValue,y=PowellStorage, color="Powell"), size=2) +
  #Mead Storage
  geom_line(data=dfJointStorage,aes(x=DateAsValue,y=MeadStorage, color="Mead"), size=2) +
  #Combined Storage
  geom_line(data=dfJointStorage,aes(x=DateAsValue,y=MeadStorage+PowellStorage, color="Combined"), size=2) +
  scale_color_manual(values = c("purple","red","blue"), breaks=c("Combined", "Powell", "Mead")) +
  #geom_area(data=dfPlotData,aes(x=month,y=stor_maf, fill = variable), position='stack') +
  scale_y_continuous(breaks = seq(0,50,by=10),labels=seq(0,50,by=10)) +
  scale_x_date(limits= c(as.Date("1968-01-01"), as.Date("2030-01-01"))) +
  
  
  #    scale_y_continuous(breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]),labels=c(0,5.98,9.6,12.2,dfMaxStor[2,2]),  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]), labels = c(895,1025,1075,1105,1218.8))) +
  #scale_x_discrete(breaks=cMonths, labels= cMonthsLabels) +
  #scale_x_continuous(breaks=seq(1960,2020,by=10), labels= seq(1960,2020,by=10)) +
  
  
  #scale_fill_manual(breaks=c(1:6),values = palBlues[2:7]) + #,labels = variable) + 
  theme_bw() +
  #coord_fixed() +
  labs(x="", y="Active Storage (MAF)", color = "Reservoir") +
  theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18))
  #theme(text = element_text(size=20), legend.text=element_text(size=16)


```

# Figure 2. Combined storage of Lake Powell and Lake Mead over time in comparison to Lake Mead conservation account balances, combined protection volume, and 2026 expiration of Interim Guidelines.
```{r CombinedFig2, echo=FALSE, warning=FALSE, message=FALSE}
  

### Combined plot for proposal that shows:
###    - combined protection level
###    - Lake Mead conservation account balances

## Read in ICS account balance data
sExcelFile <- 'IntentionallyCreatedSurplus-Summary.xlsx'
dfICSBalance <- read_excel(sExcelFile, sheet = "Sheet1",  range = "B6:G17")
nMaxYearICSData <- max(dfICSBalance$Year)
#Register the largest year. Right now one larger than ICS
nMaxYearResData <- nMaxYearICSData + 1

#Duplicate the largest year and set the year to largest value plus 1
dfICSBalance <- rbind(dfICSBalance, dfICSBalance %>% filter(Year == nMaxYearICSData) %>% mutate(Year = nMaxYearICSData+1))
#Order by decreasing year
dfICSBalance <- dfICSBalance[order(-dfICSBalance$Year),]
#Turn time into a index by month. Year 1 = 1, Year 2 = 13
dfICSBalance$MonthIndex <- 12*(dfICSBalance$Year - dfICSBalance$Year[nrow(dfICSBalance)]) + 12

#Turn the ICS year into monthly
dfICSmonths = expand.grid(Year = unique(dfICSBalance$Year), month = 1:12)
dfICSmonths$MonthIndex <- 12*(dfICSmonths$Year - dfICSmonths$Year[nrow(dfICSmonths)]) + dfICSmonths$month
#Filter off first year but keep last month
dfICSmonths <- dfICSmonths %>% filter(dfICSmonths$MonthIndex >= 12)
#Calculate a date
dfICSmonths$Date <- as.Date(sprintf("%d-%d-01",dfICSmonths$Year, dfICSmonths$month))


#Interpolate Lower Basin conservation account balances by Month
dfICSmonths$LowerBasinConserve <- interp1(xi = dfICSmonths$MonthIndex, x=dfICSBalance$MonthIndex, y = dfICSBalance$Total, method="linear" )
#Interpolate Mexico conservation account balance by Month
dfICSmonths$MexicoConserve <- interp1(xi = dfICSmonths$MonthIndex, x=dfICSBalance$MonthIndex, y = dfICSBalance$Mexico, method="linear" )

#Set values above the max ICS date to zero
dfICSmonths[dfICSmonths$Year > nMaxYearICSData, c("LowerBasinConserve", "MexicoConserve")] <- 0


## Calculate the Protection elevation
dfProtectLevel <- data.frame(Reservoir = c("Powell", "Mead"), Elevation = c(3525, 1020), xPos = 2001, yPos = c(30.75,25.75))
#Interpolate storage from elevation
dfProtectLevel$Volume[1] <- interpNA(xi = dfProtectLevel$Elevation[1], x= dfPowellElevStor$`Elevation (ft)`, y=dfPowellElevStor$`Live Storage (ac-ft)`)
dfProtectLevel$Volume[2] <- interpNA(xi = dfProtectLevel$Elevation[2], x= dfMeadElevStor$`Elevation (ft)`, y=dfMeadElevStor$`Live Storage (ac-ft)`)

nProtectCombined <- sum(dfProtectLevel$Volume)/1e6
nCapacityCombined <- (dfMaxStor[1,2] + dfMaxStor[2,2])
nLastVolumeCombined <- dfJointStorage$PowellStorage[629] + dfJointStorage$MeadStorage[629]

#Data frame of key dates
dfKeyDates <- data.frame(Date = as.Date(c("2007-01-01", "2026-01-01")), Label = c("Interim\nGuidelines", "Guidelines\nExpire"))
#Data frame of key elevations
dfKeyVolumes <- data.frame(Volume = c(nProtectCombined, nCapacityCombined), Label = c("Protect","Combined\nCapacities"))
#Data frame of key traces
dfKeyTraceLabels <- data.frame(Label = c("Protect", "Public Pools", "Lake Mead\nConservation\nAccounts", "Deficit Mindset"),
                                Volume = c(nProtectCombined/2, 15, 25, 40), xPosition = rep(2007 + (nMaxYearResData - 2007)/2,4),
                                Size = c(6, 6, 5, 6))

#Adjust the x positions of the Available water and LB + MX conserved water
dfKeyTraceLabels$xPosition[2] <- 2003
dfKeyTraceLabels$xPosition[3] <- (2026 + nMaxYearResData + .995 )/2
#Data frame of end arrows
nArrowOffset <- 4
dfEndArrows <- data.frame(Label = c("Recover?", "Stabilize?", "Draw down?"), Ystart = rep(nLastVolumeCombined,3), 
                            Xstart = as.Date(rep("2022-01-01",3)), Xend = as.Date(rep("2025-01-01",3)),
                            Yend = c(nLastVolumeCombined + nArrowOffset, nLastVolumeCombined, nLastVolumeCombined - nArrowOffset),
                            Angle = c(20,0,-20), Yoffset = c(0.1, 0, -0.1))
#Calculate the mid date
dfEndArrows$MidDate <- dfEndArrows$Xstart + floor((dfEndArrows$Xend - dfEndArrows$Xstart)/2)

#Left join the ICS data to the joint storage data to get the entire date range
dfJointStorage <- left_join(dfJointStorage, dfICSmonths, by=c("DateAsValue" = "Date"))
#Convert NAs to zeros
dfJointStorage$Year <- year(dfJointStorage$DateAsValue)
dfJointStorageClean <- dfJointStorage[,2:ncol(dfJointStorage)] %>% filter(Year <= nMaxYearICSData)

#Allow to go one more year
dfJointStorageClean <- dfJointStorage[,2:ncol(dfJointStorage)] %>% filter(Year <= nMaxYearResData)

dfJointStorageClean[is.na(dfJointStorageClean)] <- 0
dfTemp <- dfJointStorage %>% filter(Year <= nMaxYearResData) %>% select(DateAsValue)
dfJointStorageClean$DateAsValue <- dfTemp$DateAsValue

#Add rows for years 2022 to 2030 with all zeros
dfYearsAdd <- data.frame(Year = seq(nMaxYearResData+1, nMaxYearICSData + 10, by = 1))
dfJointStorageZeros <- dfJointStorageClean[1,1:(ncol(dfJointStorageClean)-1)]
dfJointStorageZeros[1, ] <- 0
dfJointStorageZeros <- as.data.frame(lapply(dfJointStorageZeros,  rep, nrow(dfYearsAdd)))
dfJointStorageZeros$Year <- dfYearsAdd$Year
#Calculate a date
dfJointStorageZeros$DateAsValue <- as.Date(sprintf("%.0f-01-01", dfJointStorageZeros$Year))
#Bind to the Clean data frame
dfJointStorageClean <- rbind(dfJointStorageClean, dfJointStorageZeros)


#New data frame for area
dfJointStorageStack <- dfJointStorageClean

dfJointStorageStack$Protect <- nProtectCombined
dfJointStorageStack$LowerBasin <- ifelse(dfJointStorageStack$Year <= nMaxYearResData, dfJointStorageStack$LowerBasinConserve/1e6, 0)
dfJointStorageStack$Mexico <- ifelse(dfJointStorageStack$Year <= nMaxYearResData, dfJointStorageStack$MexicoConserve/1e6, 0)
dfJointStorageStack$AvailableWater <- ifelse(dfJointStorageStack$Year <= nMaxYearResData, dfJointStorageStack$PowellStorage + dfJointStorageStack$MeadStorage - dfJointStorageStack$Protect - dfJointStorageStack$LowerBasin - dfJointStorageStack$Mexico, 0)
dfJointStorageStack$Capacity <- ifelse(dfJointStorageStack$Year <= nMaxYearResData, nCapacityCombined - dfJointStorageStack$AvailableWater - dfJointStorageStack$Protect - dfJointStorageStack$LowerBasin - dfJointStorageStack$Mexico, 0)

#Melt the data
dfJointStorageStackMelt <- melt(dfJointStorageStack, id.vars = c("DateAsValue"), measure.vars = c("Protect","LowerBasin", "Mexico", "AvailableWater", "Capacity"))
#Specify the order of the variables
dfJointStorageStackMelt$variable <- factor(dfJointStorageStackMelt$variable, levels=c("Capacity","AvailableWater", "Mexico", "LowerBasin", "Protect"))

#Get the color palettes
#Get the blue color bar
pBlues <- brewer.pal(9,"Blues")
pReds <- brewer.pal(9,"Reds")

ggplot() +
  #Combined Storage
  #As area
  geom_area(data=dfJointStorageStackMelt, aes(x=DateAsValue, y=value, fill=variable, group=variable)) +
  #Total Storage as a thick line
  geom_line(data=dfJointStorageStack %>% filter(Year < nMaxYearResData + 1),aes(x=DateAsValue,y=MeadStorage+PowellStorage, color="Combined"), size=2, color = "Black") +
  #geom_area(data=dfPlotData,aes(x=month,y=stor_maf, fill = variable), position='stack') +
  
    #Mead Storage as a thin line
  geom_line(data=dfJointStorageStack %>% filter(Year < nMaxYearResData + 1),aes(x=DateAsValue,y=MeadStorage+dfProtectLevel$Volume[1]/1e6, color="Combined"), size=0.25, color = "Black") +
  
  #lines for max capacity and protect elevation
  geom_hline(data=dfKeyVolumes, aes(yintercept = Volume), linetype="longdash", size=1) +
  #lines for Interim Guidelines and Expiry
  geom_vline(data=dfKeyDates, aes(xintercept = Date), linetype = "dashed", size=1, color = pReds[9]) +

  #Labels for the areas
  geom_text(data=dfKeyTraceLabels %>% filter(Label != dfKeyTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 4, fontface="bold") +
  geom_text(data=dfKeyTraceLabels %>% filter(Label == dfKeyTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 3, fontface="bold", color = pBlues[5]) +
  
  #Text label for reservoirs
    geom_text(data=dfProtectLevel, aes(x=as.Date(sprintf("%.0f-01-01",xPos)), y=yPos, label=as.character(Reservoir)), size = 3, angle = -43) +
 
  #Arrow Lake Mead conservation account label
  geom_curve(data = dfKeyTraceLabels %>% filter(Label == dfKeyTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), xend = as.Date(sprintf("%.0f-05-01",nMaxYearICSData+1)), y=20.5, yend = 13), curvature = -0.5, color = pBlues[5], size = 1.0, arrow = arrow(length = unit(0.03, "npc"))) +
  
  #Scales
  scale_x_date(limits= c(as.Date("2000-01-01"), as.Date("2026-01-01")), 
             breaks = c(as.Date("2000-01-01"), as.Date("2010-01-01"), as.Date("2020-01-01"), as.Date("2026-01-01")), date_labels = "%Y",
  sec.axis = sec_axis(~. +0, name = "", breaks = dfKeyDates$Date, labels = as.character(dfKeyDates$Label))) +
  #Secondary axis as percent
  scale_y_continuous(limits = c(0,NA), sec.axis = sec_axis(~ . /nCapacityCombined*100, name = "Percent of Combined Capacity", breaks = seq(0,100,by=25), labels = sprintf("%d%%", seq(0,100,by=25)))) +
  
  scale_fill_manual(values=c(pReds[3], pBlues[3], pBlues[5], pBlues[5], pBlues[7])) +
  
  #    scale_y_continuous(breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]),labels=c(0,5.98,9.6,12.2,dfMaxStor[2,2]),  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]), labels = c(895,1025,1075,1105,1218.8))) +
  #scale_x_discrete(breaks=cMonths, labels= cMonthsLabels) +
  #scale_x_continuous(breaks=seq(1960,2020,by=10), labels= seq(1960,2020,by=10)) +
  
  
  #scale_fill_manual(breaks=c(1:6),values = palBlues[2:7]) + #,labels = variable) + 
  theme_bw() +
  #coord_fixed() +
  labs(x="", y="Combined Active Storage\n(MAF)", color = "") +
  theme(text = element_text(size=12), legend.title=element_blank(), legend.position ="none")
#theme(text = element_text(size=20), legend.text=element_text(size=16)

```

# Figure 3. Combined storage of Lake Powell and Lake Mead over time with flex accounts
```{r CombinedFig3, echo=FALSE, warning=FALSE, message=FALSE}

#####################
##### Change Public pool, Lake Mead Conservation Accounts, to Private Accounts

#New data frame for area
nDataYearMax <- 2021
nMonthLast <- 9
nNegotiate <- 0.75 # maf of storage to negotiate

dfAccounts <- data.frame(Name = c("Capacity", "Negotiate", "Mexico", "UpperBasin", "LowerBasin", "SharedReserve"),
                         Label = c("Deficit Mindset", "Negotiate", "Mexico", "Upper Basin", "Lower Basin", "Shared, Reserve"),
                         Order = seq(6,1, by=-1))



#Filter out the last record
dfJointStorageFlexStack <- dfJointStorage %>% filter(Year == nDataYearMax, month == nMonthLast)
#Drop the final 2 columns
dfJointStorageFlexStack <- dfJointStorageFlexStack[ !(names(dfJointStorageFlexStack) %in% c("LowerBasinConserve", "MexicoConserve"))]

#Duplicate the last record

dfJointStorageFlexStackCopy <- dfJointStorageFlexStack
#Make the date something arbitrary earlier
dfJointStorageFlexStackCopy$Year <- nDataYearMax - 1
dfJointStorageFlexStack <- rbind(dfJointStorageFlexStack, dfJointStorageFlexStackCopy )

# #Add a zeros row
# dfTest <- dfJointStorageFlexStack[1,]
# dfTest$DateAsValue <- as.Date("2022-01-01")
# dfTest[,2:ncol(dfTest)] <- NA
# dfJointStorageFlexStack <- rbind(dfJointStorageFlexStack, dfTest)
# #Recalculate the year
# dfJointStorageFlexStack$Year <- year(dfJointStorageFlexStack$DateAsValue)

#Calculate incremental pool volumes. Start with Shared Reserve and work up.
dfJointStorageFlexStack$SharedReserve <- nProtectCombined
dfJointStorageFlexStack$LowerBasin <- as.double((dfICSBalance %>% filter(Year == nMaxYearICSData) %>% select(Total))/1e6)
dfJointStorageFlexStack$UpperBasin <- dfJointStorageFlexStack$PowellStorage - as.double((dfProtectLevel %>% filter(Reservoir =="Powell") %>% select(Volume))/1e6) - nNegotiate
dfJointStorageFlexStack$Mexico <- as.double(dfICSBalance %>% filter(Year == nMaxYearICSData) %>% select(Mexico)/1e6)
#dfJointStorageFlexStack$Mexico <- ifelse(dfJointStorageFlexStack$Year <= nMaxYearICSData, 0/1e6, 0)
dfJointStorageFlexStack$Negotiate <- dfJointStorageFlexStack$PowellStorage + dfJointStorageFlexStack$MeadStorage - (nProtectCombined + dfJointStorageFlexStack$LowerBasin + dfJointStorageFlexStack$UpperBasin + dfJointStorageFlexStack$Mexico)
dfJointStorageFlexStack$Capacity <- nCapacityCombined - (dfJointStorageFlexStack$PowellStorage + dfJointStorageFlexStack$MeadStorage)

#Melt the data
dfJointStorageFlexStackMelt <- melt(dfJointStorageFlexStack, id.vars = c("Year"), measure.vars = c("SharedReserve", "LowerBasin", "UpperBasin", "Mexico", "Negotiate", "Capacity"))

#Get the color palettes
#Get the blue color bar
pBlues <- brewer.pal(9,"Blues")
pReds <- brewer.pal(9,"Reds")

xPosAsYear <- 2020.5

dfVolumes <- (dfJointStorageFlexStackMelt %>% filter(Year == nMaxYearResData) %>% select(value, variable) %>% mutate(Volume = value))

dfAccounts$xPositionFlex <- xPosAsYear
#Mexico gets offset
dfAccounts$xPositionFlex[3] <- 2020.25

dfAccounts <- left_join(dfAccounts, dfVolumes , by = c("Name" = "variable")) 

#Reorder
dfAccountsSort <- dfAccounts[order(dfAccounts$Order),]
dfAccountsSort$CumVol <- cumsum(dfAccountsSort$Volume)
dfAccountsSort$YPos <- dfAccountsSort$CumVol - dfAccountsSort$Volume/2

#Join the cumulative sum to the melt so can plot dividing lines between the areas
dfJointStorageFlexStackMelt <- left_join(dfJointStorageFlexStackMelt,dfAccountsSort, by = c("variable" = "Name"))
#Specify the order of the variables
dfJointStorageFlexStackMelt$variable <- factor(dfJointStorageFlexStackMelt$variable, levels= dfAccounts$Name)


ggplot() +
  #Combined Storage
  #As area
  geom_area(data=dfJointStorageFlexStackMelt, aes(x=Year, y=Volume, fill=variable, group=variable)) +
  #Thin lines to separate accounts
  geom_line(data=dfJointStorageFlexStackMelt %>% filter(Order > 1, Order < 6), aes(x=Year, y=CumVol, color = "Combined", group = variable), size = 0.5, color = "Black") +
  
  #Top of combined storage as thick line
  geom_line(data=dfJointStorageFlexStack,aes(x=Year,y=MeadStorage+PowellStorage, color="Combined"), size=1.5, color = "Black") +
  #geom_area(data=dfPlotData,aes(x=month,y=stor_maf, fill = variable), position='stack') +
  
  #lines for max capacity and protect elevation
  geom_hline(data=dfKeyVolumes, aes(yintercept = Volume), linetype="longdash", size=1) +
  #lines for Interim Guidelines and Expiry
  #geom_vline(data=dfKeyDates, aes(xintercept = Date), linetype = "dashed", size=1, color = pReds[9]) +
  
  #Labels for the areas
  geom_text(data=dfAccountsSort, aes(x=xPositionFlex, y=YPos, label=as.character(Label)), size = 3, fontface="bold") +
  #geom_text(data=dfKeyTraceLabels %>% filter(Label == dfKeyTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 4.5, fontface="bold", color = pBlues[5]) +
  

  #Scales
  scale_x_continuous(labels = NULL) +
  #scale_y_continuous(limits = c(0,NA)) +
  # secondary axis is not working
  # scale_y_continuous(limits = c(0,NA), sec_axis(~. +0, name = "", breaks = dfKeyVolumes$Volume, labels = dfKeyVolumes$Volume)) +
  #Secondary axis as percent
  scale_y_continuous(limits = c(0,NA), sec.axis = sec_axis(~ . /nCapacityCombined*100, name = "Percent of Combined Capacity", breaks = seq(0,100,by=25), labels = sprintf("%d%%", seq(0,100,by=25)))) +
  
  scale_fill_manual(values=c(pReds[3], pBlues[3], pBlues[4], pBlues[5], pBlues[6], pBlues[8])) +
  
  #    scale_y_continuous(breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]),labels=c(0,5.98,9.6,12.2,dfMaxStor[2,2]),  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]), labels = c(895,1025,1075,1105,1218.8))) +
  #scale_x_discrete(breaks=cMonths, labels= cMonthsLabels) +
  #scale_x_continuous(breaks=seq(1960,2020,by=10), labels= seq(1960,2020,by=10)) +
  
  
  #scale_fill_manual(breaks=c(1:6),values = palBlues[2:7]) + #,labels = variable) + 
  theme_bw() +
  #coord_fixed() +
  labs(x="", y="Combined Active Storage\n(MAF)", color = "") +
  theme(text = element_text(size=12), legend.title=element_blank(), legend.position ="none")


```

# Figure 4. Lake Mead storage over time with conservation accounts
```{r CombinedFig4, echo=FALSE, warning=FALSE, message=FALSE}


###################################################
#### PLOT for MEAD

#Data frame of key elevations
nProtectMead <- dfProtectLevel$Volume[2]/1e6
nCapacityMead <- dfMaxStor$Volume[2]
dfKeyMeadVolumes <- data.frame(Volume = c(nProtectMead, nCapacityMead ), Label = c("Protect","Capacity"))
#Data frame of key traces
dfKeyMeadTraceLabels <- data.frame(Label = c("Protect", "Public Pool", "Conservation\nAccounts", "Deficit Mindset"),
                               Volume = c(nProtectMead/2, 8.5, 14, 20), xPosition = rep(2007 + (nMaxYearResData - 2007)/2,4),
                               Size = c(6, 6, 5, 6))

#Adjust the position of the MX+LB conservation accounts
dfKeyMeadTraceLabels$xPosition[3] <- (2026 + nMaxYearICSData + 0.825 )/2

## Data for the stacked plot
#New data frame for area
dfMeadStorageStack <- dfJointStorageClean

dfMeadStorageStack$Protect <- nProtectMead
dfMeadStorageStack$LowerBasin <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, dfMeadStorageStack$LowerBasinConserve/1e6, 0)
dfMeadStorageStack$Mexico <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, dfMeadStorageStack$MexicoConserve/1e6, 0)
dfMeadStorageStack$AvailableWater <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, dfMeadStorageStack$MeadStorage - dfMeadStorageStack$Protect - dfMeadStorageStack$LowerBasin - dfMeadStorageStack$Mexico, 0)
dfMeadStorageStack$Capacity <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, nCapacityMead - dfMeadStorageStack$AvailableWater - dfMeadStorageStack$Protect - dfMeadStorageStack$LowerBasin - dfMeadStorageStack$Mexico, 0)

#Melt the data
dfMeadStorageStackMelt <- melt(dfMeadStorageStack, id.vars = c("DateAsValue"), measure.vars = c("Protect","LowerBasin", "Mexico", "AvailableWater", "Capacity"))
#Specify the order of the variables
dfMeadStorageStackMelt$variable <- factor(dfMeadStorageStackMelt$variable, levels=c("Capacity","AvailableWater", "Mexico", "LowerBasin", "Protect"))

#Read in the levels from CSV
dfMeadPoolsPlot2 <- read.csv("dfMeadPoolsPlot2.csv",header=TRUE)



ggplot() +
  #Combined Storage
  #As area
  geom_area(data=dfMeadStorageStackMelt, aes(x=DateAsValue, y=value, fill=variable, group=variable)) +
  #As line
  geom_line(data=dfMeadStorageStack %>% filter(Year < nMaxYearResData + 1),aes(x=DateAsValue,y=MeadStorage, color="Combined"), size=2, color = "Black") +
  #geom_area(data=dfPlotData,aes(x=month,y=stor_maf, fill = variable), position='stack') +
  
  #lines for max capacity and protect elevation
  geom_hline(data=dfKeyMeadVolumes, aes(yintercept = Volume), linetype="longdash", size=1) +
  #lines for Interim Guidelines and Expiry
  geom_vline(data=dfKeyDates, aes(xintercept = Date), linetype = "dashed", size=1, color = pReds[9]) +
  
  #Labels for the areas
  geom_text(data=dfKeyMeadTraceLabels %>% filter(Label != dfKeyMeadTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 4, fontface="bold") +
  geom_text(data=dfKeyMeadTraceLabels %>% filter(Label == dfKeyMeadTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 3, fontface="bold", color = pBlues[5]) +
  
  #Arrow Lake Mead conservation account label
  geom_curve(data = dfKeyTraceLabels %>% filter(Label == dfKeyTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), xend = as.Date(sprintf("%.0f-05-01",nMaxYearICSData+1)), y=12.5, yend = 7), curvature = -0.5, color = pBlues[5], size = 1.0, arrow = arrow(length = unit(0.03, "npc"))) +
  
  
  #Label what is next
  #geom_text(data = dfEndArrows %>% filter(Label == "Recover?"), aes(x= MidDate, y = Ystart, label = "Recover?\nStabilize?\nDraw down?"), size = 5, color = "Black") +
  #Label the arrows
  #geom_text(data = dfEndArrows, aes(x = Xstart, y = (Ystart+Yend)/2 + Yoffset, label = Label, angle = Angle), size = 5, color = "Black", hjust = 0) +
  
  #geom_segment(aes(x=as.Date("2022-01-01"), xend=as.Date("2025-01-01"), y=12, yend = 14, colour = palBlues[7], arrow = arrow())) +

  
  #Scales
  scale_x_date(limits= c(as.Date("2000-01-01"), as.Date("2026-01-01")), sec.axis = sec_axis(~. +0, name = "", breaks = dfKeyDates$Date, labels = as.character(dfKeyDates$Label))) +
  #scale_y_continuous(limits = c(0,NA)) +
  # secondary axis is not working
  # scale_y_continuous(limits = c(0,NA), sec_axis(~. +0, name = "", breaks = dfKeyVolumes$Volume, labels = dfKeyVolumes$Volume)) +
  #Secondary axis as percent
  #scale_y_continuous(limits = c(0,NA), sec.axis = sec_axis(~ . /nCapacityMead*100, name = "Percent of Capacity", breaks = seq(0,100,by=25), labels = sprintf("%d%%", seq(0,100,by=25)))) +

  #Secondary axis as Mead level
  scale_y_continuous(limits = c(0, NA),  sec.axis = sec_axis(~. +0, name = "Elevation (feet)", breaks = dfMeadPoolsPlot2$stor_maf, labels = dfMeadPoolsPlot2$label)) +
  
  
  scale_fill_manual(values=c(pReds[3], pBlues[3], pBlues[5], pBlues[5], pBlues[7])) +
  
  #    scale_y_continuous(breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]),labels=c(0,5.98,9.6,12.2,dfMaxStor[2,2]),  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]), labels = c(895,1025,1075,1105,1218.8))) +
  #scale_x_discrete(breaks=cMonths, labels= cMonthsLabels) +
  #scale_x_continuous(breaks=seq(1960,2020,by=10), labels= seq(1960,2020,by=10)) +
  
  
  #scale_fill_manual(breaks=c(1:6),values = palBlues[2:7]) + #,labels = variable) + 
  theme_bw() +
  #coord_fixed() +
  labs(x="", y="Active Storage\n(MAF)", color = "") +
  theme(text = element_text(size=12), legend.title=element_blank(), legend.position ="none")
#theme(text = element_text(size=20), legend.text=element_text(size=16)



```
