#Yaxis: Secondary axis as Mead level with pre-processed zones
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),  sec.axis = sec_axis(~. +0, name = "Elevation (feet)", breaks = dfMeadPoolsPlot2$stor_maf, labels = dfMeadPoolsPlot2$label)) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
theme_bw() +
labs(x="Year", y="Mead Active Storage (MAF)", color =  "Natural Inflow\n(MAF/year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20), legend.text=element_text(size=18),
legend.position = "none")
ggsave("Fig6-MeadStorageVsTime-LeeFerryFlow.jpg",width = 12,
height = 8, units = "in",
dpi = 300)
###############################################################################################
# CALCULATE Final state as a function of Steady Inflow and Initial Reservoir storage ####
#
#  Final state is either years to lower Target (e.g., Mead 1025 feet), years to Fill, or steady state volume
#
# Make a plot of inflow (x-axis), initial reservoir storage (y-axis), and time to bads
###############################################################################################
#Create the master dataframe of results
dfInflowStorageSimulations <- data.frame(InitStorage=0, Inflow=0, FinalStorage=0, Status="dummy", Year=0, index=0, Storage=0, Release=0)
maxIts <- 100
#Initial Storage scenarios (MAF)
cInitStorageScens <- seq(3,tMaxVol,by=2)*1e6
#Steady Inflow scenarios (MAF per year)
cInflowScens <- seq(4,14, by=0.5)*1e6
#Record the number of scenarios
nFlowScens <- length(cInflowScens)
nInitStorScens <- length(cInitStorageScens)
#Define DCP zone polygons
dfPolyScens <- dfPolyAll
dfPolyScens$Inflow <- c(cInflowScens[1],cInflowScens[nFlowScens],cInflowScens[nFlowScens],cInflowScens[1],cInflowScens[1],cInflowScens[nFlowScens],cInflowScens[nFlowScens],cInflowScens[1])/1e6
dfPolyScens$MidInflow <- mean(cInflowScens[1],cInflowScens[nFlowScens])/1e6
#Loop over initial storage
for (tInitStorage in cInitStorageScens) {
#Loop over stead natural inflow values (stress tests)
for (tInflow in cInflowScens){
#tInflow <- 6e6
#debug(TimeToReservoirTarget)
tRes <- TimeToReservoirTarget(Sinit = tInitStorage, inflow = tInflow, deliveryVolume = dfCutbacks$DeliveryDCP, # deliveryVolume = dfCutbacks$DeliveryDCP,
deliveryResStorage = dfCutbacks$MeadActiveVolume, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, MaxIts = maxIts, sMethodRelease = "constant",
#Down to 1025 ft
#sMinTarget = dfMeadValsAdd$value[6], sMaxTarget = tMaxVol*1e6, startYear = startYear )
#Down to Dead Pool
sMinTarget = dfMeadAllPools$value[9], sMaxTarget = tMaxVol*1e6, startYear = startYear )
#Append results to dataframe
#dfTempRecord <- data.frame(InitStorage=tInitStorage, Inflow=tInflow, FinalStorage=tRes$volume, Status=tRes$status, Year=startYear+tRes$periods, index=tRes$periods, Release=tRes$dfTimeResults$Release)
nIts <- nrow(tRes$dfTimeResults)
dfTempRecord <- data.frame(InitStorage=rep(tInitStorage,nIts), Inflow=tRes$dfTimeResults$Inflow, FinalStorage=rep(tRes$volume,nIts), Status=rep(tRes$status,nIts), Year=tRes$dfTimeResults$Year, index=tRes$dfTimeResults$index, Storage= tRes$dfTimeResults$Storage, Release=tRes$dfTimeResults$Release)
dfInflowStorageSimulations <- rbind(dfInflowStorageSimulations, dfTempRecord)
}
}
#Remove the first dummy row of zeros
dfInflowStorageSimulations <- dfInflowStorageSimulations[2:nrow(dfInflowStorageSimulations),]
# Plot up storage over time for different inflow traces.
dfTimeInflowStorageResults <- dfInflowStorageSimulations
# Select even rows for plotting flow labels
dfTimeInflowStorageResultsEven <- dfTimeInflowStorageResults[seq(2,nrow(dfTimeResults),by=2),]
xLabelPos <- 0.7*max(dfTimeInflowStorageResults$Inflow/1e6) # in inflow units
#Flow scale
xFlowScale <- seq(min(dfTimeInflowStorageResults$Inflow),max(dfTimeInflowStorageResults$Inflow),1e6)/1e6
#Remove rows with NA
dfTimeInflowStorageResultsNoNA <- dfTimeInflowStorageResults %>% drop_na()
#Keep the record with the largest index (time to) in each Initial Storage, Inflow, Status group
dfTimeInflowStorageResultsClean <- dfTimeInflowStorageResultsNoNA %>%
group_by(InitStorage, Inflow, FinalStorage, Status) %>%
summarize(index = max(index))
#Remove duplicate rows and rows with NA
#dfTimeInflowStorageResultsClean <- dfTimeInflowStorageResults[complete.cases(dfTimeInflowStorageResults),] %>% distinct(InitStorage, Inflow, .keep_all=TRUE)
#Calculate label as either years to bottom target, years to full, or steady-state storage in maf
dfTimeInflowStorageResultsClean$Label <- ifelse(dfTimeInflowStorageResultsClean$Status == "Middle",
paste(round(dfTimeInflowStorageResultsClean$FinalStorage/1e6, digits=1),'maf'),
paste(dfTimeInflowStorageResultsClean$index,"yr"))
#Calculate contour value (primarily Duration) as either years to bottom target, years to full, or steady-state storage in maf
dfTimeInflowStorageResultsClean$ContourValue <- ifelse(dfTimeInflowStorageResultsClean$Status == "Middle",
round(dfTimeInflowStorageResultsClean$FinalStorage/1e6, digits=1),
dfTimeInflowStorageResultsClean$index)
#Now do the plot: X-axis is inflow, y-axis is initial storage, z-labels are time to catastrophy.
p <- ggplot() +
#Polygon zones
geom_polygon(data = dfPolyScens, aes(x = Inflow, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
#  geom_polygon(data = dfPolyAll, aes(x = Year, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
#Inflow traces
#geom_line(data=dfTimeInflowStorageResults,aes(x=Year,y=Storage/1e6, group = Inflow/1e6, color = (Inflow/1e6)), size=2) +
#  geom_text(aes(x=xLabelPos, y=23, label="Time to Mead 1025\n(Years)"), angle = 0, size = 7, hjust="middle") +
#Plot labels that show the the numbre of years to
#geom_label(data=dfTimeInflowStorageResults , aes( x = Inflow/1e6, y = InitStorage/1e6, label = round(FinalStorage/1e6,1), color = Status , size = index ,fontface="bold"),  angle = 0) +
#geom_label(data=dfTimeInflowStorageResults , aes( x = Inflow/1e6, y = InitStorage/1e6, label = Label, color = Status , size = 5 ,fontface="bold"),  angle = 0) +
geom_label(data=dfTimeInflowStorageResultsClean , aes( x = Inflow/1e6, y = InitStorage/1e6, label = Label, color = Status , size = 5 ,fontface="bold"),  angle = 0) +
#Label the polygons
geom_label(data=dfPolyLabel[1,], aes(x = MidInflow, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Label the polygons
#  geom_label(data=dfPolyLabel, aes(x = xLabelPos, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
#scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),
#                   sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
#Yaxis: Secondary axis as Mead level with pre-processed zones
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),  sec.axis = sec_axis(~. +0, name = "Elevation (feet)", breaks = dfMeadPoolsPlot2$stor_maf, labels = dfMeadPoolsPlot2$label)) +
scale_x_continuous(breaks = xFlowScale, labels = xFlowScale) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = c(2,1),values = c(palReds[5],palReds[4]),labels = dfPolyLabel$Label ) +
#scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","green","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x="Steady Inflow (MAF/year)", y="Mead Active Storage (MAF)", color =  "End State") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20), legend.text=element_text(size=18),
panel.border = element_rect(colour = "black", fill=NA),
legend.box.background = element_rect(colour = "black"),
legend.box.margin = margin(6, 6, 6, 6),
legend.position = c(1.125,0.85)) #,
#legend.position = "none")
print(p)
### Plot Start Storage-Inflow results as contour plot
# y-axis: Mead active storage
# x-axis: either Steady Mead Inflow, Powell Release, or Lee Ferry Natural flow
# Contours: time to dead pool, time to fill, steady end storage
# Create a Data Frame to populate the three x-axes: Steady Mead Inflow, Powell Release, Lee Ferry Natural Flow
dfInflowAxes <- data.frame(Title = c("Steady Mead Inflow", "Powell Release", "Lee Ferry Natural Flow"),
TranformFromSteady = as.numeric(c(0,-GrandCanyonTribFlows ,vMeadInflowToLeeNaturalCorrection)),
FileName = c("MeadInflow","PowellRelease","LeeFerry"))
# plot following https://www.r-statistics.com/2016/07/using-2d-contour-plots-within-ggplot2-to-visualize-relationships-between-three-variables/
# Specify the contour intervals (years to reach target)
# See https://cran.r-project.org/web/packages/metR/vignettes/Visualization-tools.html
#Calculate inflow positions for labels of plot areas: bottom, mid, top. These are the min and max
#inflows for each group
#Remove plyr to group
detach(package:plyr)
if (!require(metR)) {
install.packages("metR")
library(metR)
}
nRows <- nrow(dfInflowAxes)
for (i in (1:nRows)) {
print(i)
}
# Loop over the inflow axes
for (i in (1:nRows)) {
i <- 1
#Print out the iteration
print(i)
#Calculate the inflow values to use
dfTimeInflowStorageResultsClean$InflowToUse <- dfTimeInflowStorageResultsClean$Inflow +
dfInflowAxes[i,2]
#Calculate a convienent flow scale to use
min(dfTimeInflowStorageResultsClean$InflowToUse/1e6,1e6)
xFlowScaleCurr <- seq(floor(min(dfTimeInflowStorageResultsClean$InflowToUse/1e6)),ceiling(max(dfTimeInflowStorageResultsClean$InflowToUse/1e6)))
#Calculate positions for the group labels
dfStatusPositions <- dfTimeInflowStorageResultsClean %>% group_by(Status) %>% summarize(MinInflow = min(InflowToUse), MaxInflow = max(InflowToUse))
#Add textlabels
dfStatusPositions$Label <- c("Time to Dead Pool\n(Years)","Steady Storage\n(MAF)", "Time to Fill\n(Years)")
dfStatusPositions$MidInflow <- (dfStatusPositions$MinInflow + dfStatusPositions$MaxInflow)/2
#Use geom_contour as contour plot
pPlot <- ggplot() +
geom_polygon(data = dfPolyScens, aes(x = Inflow + dfInflowAxes[i,2]/1e6, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
geom_contour(data=dfTimeInflowStorageResultsClean, aes(x=InflowToUse/1e6,y= InitStorage/1e6, z = ContourValue, color = Status), binwidth=4, size=1.5)   +
geom_text_contour(data=dfTimeInflowStorageResultsClean, aes(x=InflowToUse/1e6,y= InitStorage/1e6, z = ContourValue), binwidth=4, size=6, check_overlap = TRUE, min.size = 5) +
geom_label(data=dfStatusPositions, aes(x = MidInflow/1e6 , y = tMaxVol+2, label = Label, fontface="bold", color=Status), size=6, angle = 0) +
#Overplot the points
#geom_point(data=dfTimeInflowStorageResultsClean,aes(x = InflowToUse/1e6, y = InitStorage/1e6), size=4) +
#Label the polygons
#  geom_label(data=dfPolyLabel, aes(x = xLabelPos, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
#scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol+3),
#                   sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
#Yaxis: Secondary axis as Mead level with pre-processed zones
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),  sec.axis = sec_axis(~. +0, name = "Elevation (feet)", breaks = dfMeadPoolsPlot2$stor_maf, labels = dfMeadPoolsPlot2$label)) +
scale_x_continuous(breaks = xFlowScaleCurr, labels = xFlowScaleCurr) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = c(2,1),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
#scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","purple","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x=paste(dfInflowAxes[i,1]," (MAF per year)"), y="Mead Active Storage (MAF)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
print(pPlot)
sFigNum <- paste("Fig",i+6,"-InflowDurationStorage",sep="")
sFigName <- paste(sFigNum,dfInflowAxes[i,3],sep="")
ggsave(paste(sFigName,".jpg"),width = 12,
height = 7.5, units = "in",
dpi = 300)
# End Loop over axes
}
### Plot Inflow-Duration results as contour plot
# y-axis: Duration (years)
# x-axis: either Steady Mead Inflow, Powell Release, or Lee Ferry Natural flow
# Contours: Initial starting reservoir storage
pPlotStor <- seq(1,nRows,by=1)
# Loop over the inflow axes
#for (i in (1:nRows)) {
i <- 1
#Print out the iteration
print(i)
#Calculate the inflow values to use
dfTimeInflowStorageResultsClean$InflowToUse <- dfTimeInflowStorageResultsClean$Inflow +
dfInflowAxes[i,2]
#Remove steady storage values and duplicates
#dfResults <- dfTimeInflowStorageResultsClean %>% filter(Status == "Bottom" | Status == "Top") %>% group_by(Status,InflowToUse,ContourValue) %>%
#          distinct(Status, InflowToUse, ContourValue, .keep_all = TRUE)
#Keep middle status, remove duplicates
# dfResults <- dfTimeInflowStorageResultsClean %>% filter(Status == "Middle") %>% group_by(Status,InflowToUse,ContourValue) %>%
#          distinct(Status, InflowToUse, ContourValue, .keep_all = TRUE)
#Remove the duplicates
dfResults <- dfTimeInflowStorageResultsClean %>% group_by(Status,InflowToUse,ContourValue) %>%
distinct(Status, InflowToUse, ContourValue, .keep_all = TRUE)
#Filter out the duplicate records
dfResults <- dfResults %>% distinct(ContourValue, InflowToUse, .keep_all=TRUE)
#Rename the ContourValue the columns so it is easier to work with
#Calculate contour value (primarily Duration) as either years to bottom target, years to full, or steady-state storage in maf
dfResults$Duration <- dfResults$ContourValue
#Calculate a new z column that is start storage for the Bottom and Top status. And is the end storage
# for the Middle status
dfResults$zStorage <- ifelse(dfResults$Status == "Middle",round(dfResults$FinalStorage, digits=1),
dfResults$InitStorage)/1e6
#Calculate a convienent flow scale to use
min(dfResults$InflowToUse/1e6,1e6)
xFlowScaleCurr <- seq(floor(min(dfResults$InflowToUse/1e6)),ceiling(max(dfResults$InflowToUse/1e6)))
MaxDuration <- max(dfResults$Duration)
#Calculate positions for the group labels
dfStatusPositionsStor <- dfResults %>% group_by(Status) %>% summarize(MinInflow = min(InflowToUse), MaxInflow = max(InflowToUse))
#Add textlabels
cStatusLabels <- c("To Dead Pool\n(Start storage [MCM])","Steady Storage\n(MCM)", "To Fill\n(Start storage [MCM])")
dfStatusPositionsStor$Label <- cStatusLabels
dfStatusPositionsStor$MidInflow <- (dfStatusPositionsStor$MinInflow + dfStatusPositionsStor$MaxInflow)/2
#Redo the middle data as vertical lines from low to high
dfResultsMid <- dfResults %>% filter(Status == "Middle")
dfResultsMid <- dfResultsMid %>% group_by(InflowToUse) %>% summarize(zStorage = mean(zStorage))
dfResultsMid$Duration <- 1
dfResultsMidAdd <- data.frame(InflowToUse = rep(dfResultsMid$InflowToUse,3),
Duration = c(rep(MaxDuration/2,nrow(dfResultsMid)),rep(MaxDuration,nrow(dfResultsMid)),rep(NA,nrow(dfResultsMid))),
zStorage = rep(dfResultsMid$zStorage,3))
#Bind the dataframes together
dfResultsMid <- rbind(dfResultsMid,dfResultsMidAdd)
dfResultsMid$Status <- "Middle"
#Exclude the middle category
dfResults <- dfResults %>% filter(Status != "Middle")
#Use geom_contour as contour plot
# Plot strategy: dfResults is for Bottom and Top
#                dfResultsMid is for Middle
pPlotStor <- ggplot() +
#geom_polygon(data = dfPolyScens, aes(x = Inflow + dfInflowAxes[i,2]/1e6, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
#Plot the Bottom/Top groups as contours
geom_contour(data=dfResults, aes(x=InflowToUse/1e6, y= Duration, z = zStorage, color = Status), binwidth=4, size=1.5)   +
geom_text_contour(data=dfResults, aes(x=InflowToUse/1e6, y= Duration, z = zStorage), binwidth=4, size=6, check_overlap = TRUE, min.size = 5) +
geom_label(data=dfStatusPositionsStor, aes(x = MidInflow/1e6 , y = MaxDuration+2, label = Label, fontface="bold", color=Status), size=6, angle = 0) +
#Plot the Middle groups as contours
#geom_contour(data=dfResultsMid, aes(x=InflowToUse/1e6, y= Duration, z = zStorage, color = Status), binwidth=4, size=1.5)   +
#geom_text_contour(data=dfResultsMid, aes(x=InflowToUse/1e6, y= Duration, z = zStorage), binwidth=4, size=6, check_overlap = TRUE, min.size = 5) +
geom_line(data=dfResultsMid, aes(x=InflowToUse/1e6,y=Duration, color = Status), size=1.5) +
geom_label(data = dfResultsMid %>% filter(Duration==MaxDuration/2), aes(x=InflowToUse/1e6, y=Duration, label = sprintf("%.1f",zStorage), size=5),angle=0) +
#Overplot the data points
#geom_point(data=dfResultsMid, aes(x=InflowToUse/1e6, y= Duration), color="Black", size = 5) +
#Label the polygons
#  geom_label(data=dfPolyLabel, aes(x = xLabelPos, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
scale_y_continuous(breaks = seq(0,MaxDuration,by=5), labels = seq(0,MaxDuration,by=5), limits = c(0, MaxDuration+3)) +
# sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
scale_x_continuous(breaks = xFlowScaleCurr, labels = xFlowScaleCurr) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
#scale_fill_manual(breaks = c(2,1),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","purple","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x=paste(dfInflowAxes[i,1]," (MAF per year)"), y="Duration (years)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
print(pPlotStor)
sFigNum <- paste("Fig",i+6,"-FlowDurationStorage",sep="")
sFigName <- paste(sFigNum,dfInflowAxes[i,3],sep="")
ggsave(paste(sFigName,".jpg"),width = 12,
height = 7.5, units = "in",
dpi = 300)
# End Loop over axes
#}
### Dummy contour plot for vertical data
dfDummyVertical <- data.frame(InflowToUse = rep(seq(8.5,10.5,by=0.5),3),
Duration = c(rep(1,5),rep(10,5),rep(25,5)),
zStorage = rep(seq(6,14,by=2),3))
relBreaks <- seq(6,14,by=2)
ggplot(dfDummyVertical, aes(x=InflowToUse, y= Duration, z = zStorage)) +
#geom_polygon(data = dfPolyScens, aes(x = Inflow + dfInflowAxes[i,2]/1e6, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
geom_contour2( colour = "black", size=0.75, breaks = relBreaks)   +
#Label contour lines (This is not working very well)
#metR::geom_text_contour(aes(label=..level..),size=6, check_overlap = TRUE, parse = TRUE) +
#geom_dl(aes(label=..level..),method=list("angled.boxes", cex=2), stat="contour", breaks = relBreaks, na.rm = TRUE) +
#geom_dl(aes(label=dfDummyVertical$zStorage),method=list("angled.boxes", cex=2), stat="contour", breaks = relBreaks) +
#Overplot the data points
#geom_point( color="Black", size = 5) +
geom_label(data = dfDummyVertical %>% filter(Duration==10), aes(x=InflowToUse, y=Duration, label = zStorage, size=5),angle=0)
#geom_contour(data=dfDummyVertical, aes(x=InflowToUse, y= Duration, z = zStorage), binwidth=2, size=1.5)   +
#geom_text_contour(data=dfDummyVertical, aes(x=InflowToUse, y= Duration, z = zStorage), binwidth=2, size=6, check_overlap = TRUE, min.size = 5) +
#Overplot the data points
#geom_point(data=dfDummyVertical, aes(x=InflowToUse, y= Duration), color="Black", size = 5)
### Lee Ferry Flow plot with paleo events marked
# Read in the paleo flow data from Excel
sPaleoFile <- 'DroughtDurations.xlsx'
dfPaleoEvents <- read_excel(sPaleoFile, sheet = "Sheet1",  range = "A4:E18")
#Order the data frame by Flow
dfPaleoEvents <- dfPaleoEvents[order(dfPaleoEvents$`Average Flow (maf)`),]
dfPaleoEvents$YearRange <- paste(dfPaleoEvents$`Start Year`," to ",dfPaleoEvents$`End Year`)
dfDurations <- dfTimeInflowStorageResultsClean %>% filter(Status == "Bottom")
cLeeFlows <- unique(sort(dfDurations$InflowToUse))
cDurs <- unique(sort(dfDurations$index))
nDurs <- length(cDurs)
nLeeFlows <- length(cLeeFlows)
#Create a matrix of the storages for a particular Flow and Duration
mStors <- matrix(0, nrow = nLeeFlows, ncol = nDurs)
#Assign the right values to mgridStors
for (i in (1:nLeeFlows)) {
iFlow <- cFlows[i]
for (j in (1:nDurs)) {
iDur <- cDurs[j]
dfTempRecord <- dfDurations %>% filter(InflowToUse == iFlow, index == iDur)
mStors[i,j] <- ifelse(nrow(dfTempRecord)==0,tMaxVol*1e6,dfTempRecord$InitStorage)
}
}
#Loop through the Paleo events and interpolate a storage for the specified flow and duration
dfPaleoEvents$InitStor <- interp2(x=cDurs, y=cLeeFlows, Z = mStors/1e6, xp=dfPaleoEvents$`Length (years)`, yp=dfPaleoEvents$`Average Flow (maf)`*1e6, "linear")
## Draw the plot
# Rebring the code and integrate points/labels earlier
# Only use start year
# For events with start-storage larger than 25 MAF or greater than 12.3 MAF per year inflow, plot at
#     top as second y axis
library(ggrepel)
## Add another layer to the plot which is the points
pPlot <- pPlot +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5) +
geom_text_repel(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor, label=dfPaleoEvents$YearRange), size = 5)
print(pPlot)
############################################################
##
## What steady reservoir releases over a specified number of years will keep the reservoir above a target storage level given a steady inflow and starting storage?
##
#########################################
#Define the function to calculate
SteadyRelease <- function(StartStorage,TargetStorage,SteadyInflow,NumYears,eRate,ResArea,ResVolume,StorageErrorCrit) {
#StartStorage = starting reservoir storage volume
#TargetStorage = target reservoir storage volume
#SteadyInflow = steady inflow volume each and every year
#NumYears = Number of years to reach the storage target
#eRate = evaporation rate in length/year
#ResArea = reservoir area from bathymetry curve
#ResVolume = reservoir volume from bathymetry curve
#StorageErrorCrit = the storage volume error criteria. When the difference between the simulated final reservoir storage value
#       obtained with the steady release and the target storage falls below this criteria, the routine will
#       stop iterating to find a new steady release value.
#The guiding formula is:
#     [Storage Target] = [Start Storage] + [Num Years] * ([Inflow] - [Release] - [Evaporation])
# Solving for Release and noting Evaporation is an average of evaporation in Year 1, Year 2, ..., Year n
#     [Release] = [Inflow] - (Evap_1 + Evap_2 + ... + Evap_n - [Storage Target] + [Start Storage])/[Num Years]
# Calculate evaporation volumes in each year as a linear interpolation off the reservoir bathymetry curve from
# each expected reservoir storage volume
# Expected storage volumes
sVols <- seq(StartStorage,TargetStorage,by=(TargetStorage-StartStorage)/NumYears)
#evaporation volumes
evaps <- eRate*interpNA(x=ResVolume, y=ResArea,xi = sVols)
#print(sVols)
#print(evaps)
#Now calculate the steady annual release. Two vresions. One when Start and Target Storage are above
#The critical threshold. A second when they are below (no change in storage, steady storage)
if (abs(StartStorage - TargetStorage) > StorageErrorCrit) {
#When Start and Target storage are different
CurrSteadyRelease <- SteadyInflow - (sum(evaps) - StartStorage + TargetStorage) / NumYears
} else {
#When start storage and target storage are numerically the same
CurrSteadyRelease <- SteadyInflow - evaps[1]
}
#print(CurrSteadyRelease)
maxVol = max(ResVolume) #Maximum volume of reservoir
#Simulate the steady release, determine the actual ending storage, and check for differences
#between the simulated storage and target storage that are larger than the StorageErrorCrit
#If the error is above the StorageErrorCrit iterate to reduce the difference below the StorageErrorCritSet the initial
#Start the difference above the StorageErrorCrit so we enter the while loop at least once
StorageDifference <- StorageErrorCrit + 1
while(StorageDifference > StorageErrorCrit) {
#Simulate the current steady release
tSimTime <- TimeToReservoirTarget(Sinit = StartStorage, inflow = SteadyInflow, deliveryVolume = rep(CurrSteadyRelease,2),
deliveryResStorage = c(0,maxVol), eRate = eRateToUse, ResArea = ResArea,
ResVolume = ResVolume, MaxIts = NumYears+1, sMethodRelease = "constant", sMinTarget = 0, sMaxTarget = maxVol, startYear = 0)
#Pull out the ending storage
SimStorage <- tSimTime$dfTimeResults$Storage[NumYears+1]
#Calculate the difference between the simulated storage and the target storage
StorageDifference <- abs(SimStorage - TargetStorage)
#print(StorageDifference)
if (StorageDifference > StorageErrorCrit) {
#Adjust the Steady Releaset
CurrSteadyRelease <- CurrSteadyRelease + (SimStorage - TargetStorage) / (NumYears)
}
}
SteadyRelease <- CurrSteadyRelease
}
#Test the function
#Case 1: Decline to target
tReleaseTest <- SteadyRelease(StartStorage = 10e6, TargetStorage = 5e6, NumYears = 5, SteadyInflow = 8e6, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, StorageErrorCrit = 10000)
#Case 2: Increase to target
tReleaseTest <- SteadyRelease(StartStorage = 5e6, TargetStorage = 10e6, NumYears = 3, SteadyInflow = 8e6, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, StorageErrorCrit = 10000)
#Simulate the steady release to check
tTimeTo <- TimeToReservoirTarget(Sinit = 5e6, inflow = 8e6, deliveryVolume = rep(tReleaseTest,2),
deliveryResStorage = c(0,25e6), eRate = eRateToUse, ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume =dfMeadElevStor$`Live Storage (ac-ft)`, MaxIts = 50, sMethodRelease = "constant", sMinTarget = 0, sMaxTarget = 25e6, startYear = 2020)
#Calculate the difference between the simulated storage and target storage
tTimeTo$dfTimeResults$Storage[4] - 10e6
##Another test with 1, 1, 5, 4e6
tReleaseTest <- SteadyRelease(StartStorage = 1e6, TargetStorage = 1e6, NumYears = 3, SteadyInflow = 4e6, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, StorageErrorCrit = 10000)
tTimeTo <- TimeToReservoirTarget(Sinit = 1e6, inflow = 4e6, deliveryVolume = rep(3.770e6,2),
deliveryResStorage = c(0,25e6), eRate = eRateToUse, ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume =dfMeadElevStor$`Live Storage (ac-ft)`, MaxIts = 50, sMethodRelease = "constant", sMinTarget = 0, sMaxTarget = 25e6, startYear = 2020)
tTimeTo$dfTimeResults$Storage
### Let's simulate for a large number of scenarios of Initial Storage, Storage Targets, Inflow Scenarios, and Years to reaach the target
#Create the master dataframe of results
dfReleaseSimulations <- data.frame(StartStorage=0, StorageTarget=0, Inflow = 0, Years=0, Release=0)
#Initial Storage scenarios (MAF)
cInitStorageScens <- seq(1,tMaxVol,by=2)*1e6
#Storage targets
cStorageTargets <- seq(1, 15, by=1)*1e6
#Steady Inflow scenarios (MAF per year)
cInflowScens <- seq(4,14, by=1)*1e6
#Years to Target Storage
cYearsToTarget <- seq(1,10, by=1)
#Record the number of scenarios
nFlowScens <- length(cInflowScens)
nInitStorScens <- length(cInitStorageScens)
nYearsToTarget <- length(cYearsToTarget)
#Loop over initial storage values
for (tInitStorage in cInitStorageScens) {
print(tInitStorage)
#Loop over target storage values
for (tStorageTarget in cStorageTargets) {
#Loop over number of years to reach target
for (tNumYears in cYearsToTarget) {
#Loop over steady natural inflow values (stress tests)
for (tInflow in cInflowScens){
paste(tInitStorage, tStorageTarget, tNumYears,tInflow, sep=" ")
tRelease <- SteadyRelease(StartStorage = tInitStorage, TargetStorage = tStorageTarget, NumYears = tNumYears, SteadyInflow = tInflow, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, StorageErrorCrit = 10000)
dfTempRecord <- data.frame(StartStorage=tInitStorage, StorageTarget=tStorageTarget, Inflow = tInflow, Years=tNumYears, Release=tRelease)
dfReleaseSimulations <- rbind(dfReleaseSimulations, dfTempRecord)
}
}
}
}
#Plot as a contour plot of x= steady inflow, y = storage, a horizonal line of the storage target, and contours of release
#Select a target that is the elevation 1025
targetStorageVal <- 8e6 #dfMeadPoolsPlot$stor_maf[4]
YearToUse <- 3
ggplot() +
geom_polygon(data = dfPolyScens, aes(x = Inflow + dfInflowAxes[i,2]/1e6, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
geom_contour(data=dfReleaseSimulations %>% filter(StorageTarget == targetStorageVal, Years == YearToUse), aes(x=Inflow/1e6,y= StartStorage/1e6, z = Release/1e6), binwidth=2, size=1.5)   +
geom_text_contour(data=dfReleaseSimulations %>% filter(StorageTarget == targetStorageVal, Years == YearToUse), aes(x=Inflow/1e6,y= StartStorage/1e6, z = Release/1e6), binwidth=2, size=6, check_overlap = TRUE, min.size = 5) +
#geom_label(data=dfStatusPositions, aes(x = MidInflow/1e6 , y = tMaxVol+2, label = Label, fontface="bold", color=Status), size=6, angle = 0) +
#Label the releases
#geom_label(data=dfReleaseSimulations %>% filter(StorageTarget == targetStorageVal, Years == YearToUse), aes(x=Inflow/1e6,y= StartStorage/1e6, label = round(Release/1e6)), binwidth=4, size=6)   +
#Add a horizontal line for the storage target
geom_hline(yintercept = targetStorageVal/1e6, size = 2) +
#Y-axis: Active storage on left, Elevation with labels on right
#scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol+3),
#                   sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
#Yaxis: Secondary axis as Mead level with pre-processed zones
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),  sec.axis = sec_axis(~. +0, name = "Elevation (feet)", breaks = dfMeadPoolsPlot2$stor_maf, labels = dfMeadPoolsPlot2$label)) +
scale_x_continuous(breaks = xFlowScaleCurr, labels = xFlowScaleCurr) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = c(2,1),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
#scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","purple","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x=paste(dfInflowAxes[i,1]," (MAF per year)"), y="Mead Active Storage (MAF)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
View(dfRecoveryCases)
View(dfReleaseToStabilizeMelt)
View(dfTraceLabels)
uninstall_tinytex(force = FALSE, dir = tinytex_root())
library(tinytex)
uninstall_tinytex(force = FALSE, dir = tinytex_root())
uninstall_tinytex(force = FALSE, dir = tinytex_root())
sys.which('pdflatex')
Sys.which('pdflatex')
library(tinytex)
tinytex::install_tinytex()
Sys.which('pdflatex')
install.MikTex()
install.MikTeX()
sTemp <- Sys.which('pdflatex')
sTemp
Sys.which('pdflatex')
